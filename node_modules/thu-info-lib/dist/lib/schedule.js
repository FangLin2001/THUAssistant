"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchedule = void 0;
const core_1 = require("./core");
const strings_1 = require("../constants/strings");
const schedule_1 = require("../models/schedule/schedule");
const network_1 = require("../utils/network");
const schedule_2 = require("../mocks/schedule");
const error_1 = require("../utils/error");
const basics_1 = require("./basics");
const dayjs_1 = __importDefault(require("dayjs"));
const GROUP_SIZE = 3; // Make sure that `GROUP_SIZE` is a divisor of `weekCount`.
const getPrimary = (helper, { firstDay, weekCount }) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "287C0C6D90ABB364CD5FDF1495199962", () => Promise.all(Array.from(new Array(weekCount / GROUP_SIZE), (_, id) => (0, network_1.uFetch)((helper.graduate() ? strings_1.JXRL_YJS_PREFIX : strings_1.JXRL_BKS_PREFIX) +
    (0, dayjs_1.default)(firstDay).add((id * GROUP_SIZE) * 7, "day").format("YYYYMMDD") +
    strings_1.JXRL_MIDDLE +
    (0, dayjs_1.default)(firstDay).add(((id + 1) * GROUP_SIZE - 1) * 7 + 6, "day").format("YYYYMMDD") +
    strings_1.JXRL_SUFFIX)))
    .then((results) => results
    .map((s) => {
    if (s[0] !== "m") {
        throw new error_1.ScheduleError();
    }
    return s.substring(s.indexOf("[") + 1, s.lastIndexOf("]"));
})
    .filter((s) => s.trim().length > 0)
    .join(","))
    .then((str) => (0, schedule_1.parseJSON)(JSON.parse(`[${str}]`), firstDay)), schedule_2.MOCK_PRIMARY_SCHEDULE);
const getSecondary = (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "287C0C6D90ABB364CD5FDF1495199962", () => (0, network_1.uFetch)(strings_1.SECONDARY_URL).then((str) => {
    const lowerBound = str.indexOf("function setInitValue");
    const upperBound = str.indexOf("}", lowerBound);
    return (0, schedule_1.parseScript)(str.substring(lowerBound, upperBound));
}), schedule_2.MOCK_SECONDARY_SCHEDULE);
const getSchedule = async (helper) => {
    const calendarData = await (0, basics_1.getCalendar)(helper);
    let scheduleList = (await getPrimary(helper, calendarData)).concat(await getSecondary(helper));
    scheduleList = (0, schedule_1.mergeSchedules)(scheduleList);
    scheduleList.forEach(schedule_1.mergeTimeBlocks);
    return scheduleList;
};
exports.getSchedule = getSchedule;
//# sourceMappingURL=schedule.js.map