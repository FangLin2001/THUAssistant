"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roamingWrapperWithMocks = exports.roamingWrapper = exports.roam = exports.logout = exports.login = exports.getCsrfToken = void 0;
const strings_1 = require("../constants/strings");
const cheerio_1 = __importDefault(require("cheerio"));
const network_1 = require("../utils/network");
const network_2 = require("../utils/network");
const error_1 = require("../utils/error");
const HOST_MAP = {
    "zhjw.cic": "77726476706e69737468656265737421eaff4b8b69336153301c9aa596522b20bc86e6e559a9b290",
    "jxgl.cic": "77726476706e69737468656265737421faef469069336153301c9aa596522b20e33c1eb39606919f",
    "ecard": "77726476706e69737468656265737421f5f4408e237e7c4377068ea48d546d303341e9882a",
    "learn": "77726476706e69737468656265737421fcf2408e297e7c4377068ea48d546d30ca8cc97bcc",
    "mails": "77726476706e69737468656265737421fdf64890347e7c4377068ea48d546d3011ff591d40",
    "50": "77726476706e69737468656265737421a5a70f8834396657761d88e29d51367b6a00",
    "166.111.14.8": "77726476706e69737468656265737421a1a117d27661391e2f5cc7f4",
};
const parseUrl = (urlIn) => {
    const rawRes = /http:\/\/(\d+.\d+.\d+.\d+):(\d+)\/(.+)/g.exec(urlIn);
    if (rawRes !== null && rawRes[1] !== undefined && rawRes[2] !== undefined && rawRes[3] !== undefined) {
        return `https://webvpn.tsinghua.edu.cn/http-${rawRes[2]}/${HOST_MAP[rawRes[1]]}/${rawRes[3]}`;
    }
    const protocol = urlIn.substring(0, urlIn.indexOf(":"));
    const regRes = /:\/\/(.+?).tsinghua.edu.cn\/(.+)/.exec(urlIn);
    if (regRes === null || regRes[1] === undefined || regRes[2] === undefined) {
        throw new error_1.UrlError();
    }
    const host = regRes[1];
    const path = regRes[2];
    return `https://webvpn.tsinghua.edu.cn/${protocol}/${HOST_MAP[host]}/${path}`;
};
const getCsrfToken = async () => {
    const cookie = await (0, network_2.uFetch)(strings_1.GET_COOKIE_URL);
    const q = /XSRF-TOKEN=(.+?);/.exec(cookie + ";");
    if (q === null || q[1] === undefined) {
        throw new Error("Failed to get csrf token.");
    }
    return q[1];
};
exports.getCsrfToken = getCsrfToken;
const login = async (helper, userId, password, dormPassword) => {
    helper.userId = userId;
    helper.password = password;
    helper.dormPassword = dormPassword;
    if (!helper.mocked()) {
        (0, network_1.clearCookies)();
        await helper.clearCookieHandler();
        const loginResponse = await (0, network_2.uFetch)(strings_1.DO_LOGIN_URL, {
            auth_type: "local",
            username: userId,
            sms_code: "",
            password: password,
        }).then(JSON.parse);
        if (!loginResponse.success) {
            switch (loginResponse.error) {
                case "NEED_CONFIRM":
                    await (0, network_2.uFetch)(strings_1.CONFIRM_LOGIN_URL, {});
                    break;
                default:
                    throw new error_1.LoginError(loginResponse.message);
            }
        }
        try {
            await (0, exports.roam)(helper, "id", "10000ea055dd8d81d09d5a1ba55d39ad");
        }
        catch (e) {
            throw new error_1.LoginError(e === null || e === void 0 ? void 0 : e.message);
        }
    }
};
exports.login = login;
const logout = async (helper) => {
    if (!helper.mocked()) {
        await (0, network_2.uFetch)(strings_1.LOGOUT_URL);
    }
};
exports.logout = logout;
const roam = async (helper, policy, payload) => {
    switch (policy) {
        case "default": {
            const csrf = await (0, exports.getCsrfToken)();
            const { object } = await (0, network_2.uFetch)(`${strings_1.ROAMING_URL}?yyfwid=${payload}&_csrf=${csrf}&machine=p`, {}).then(JSON.parse);
            const url = parseUrl(object.roamingurl.replace(/&amp;/g, "&"));
            return await (0, network_2.uFetch)(url);
        }
        case "id": {
            await (0, network_2.uFetch)(strings_1.ID_BASE_URL + payload);
            let response = await (0, network_2.uFetch)(strings_1.ID_LOGIN_URL, {
                i_user: helper.userId,
                i_pass: helper.password,
                i_captcha: "",
            });
            if (!response.includes("登录成功。正在重定向到")) {
                await (0, network_2.uFetch)(strings_1.ID_BASE_URL + payload);
                response = await (0, network_2.uFetch)(strings_1.ID_LOGIN_URL, {
                    i_user: helper.userId,
                    i_pass: helper.password,
                    i_captcha: "",
                });
                if (!response.includes("登录成功。正在重定向到")) {
                    throw new error_1.IdAuthError();
                }
            }
            const redirectUrl = (0, cheerio_1.default)("a", response).attr().href;
            return await (0, network_2.uFetch)(redirectUrl);
        }
        case "cab": {
            return await (0, network_2.uFetch)(strings_1.LIBRARY_ROOM_BOOKING_LOGIN_URL, {
                id: helper.userId,
                pwd: helper.password,
                act: "login",
            });
        }
        case "myhome": {
            const validChars = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz =+-/_()<>,.'`~");
            const password = helper.dormPassword || helper.password;
            let tempPassword = "";
            for (let i = 0; i < password.length; i++) {
                if (validChars.has(password.charAt(i))) {
                    tempPassword += password.charAt(i);
                }
            }
            const $ = cheerio_1.default.load(await (0, network_2.uFetch)(strings_1.TSINGHUA_HOME_LOGIN_URL));
            return await (0, network_2.uFetch)(strings_1.TSINGHUA_HOME_LOGIN_URL, {
                __VIEWSTATE: $("#__VIEWSTATE").attr().value,
                __VIEWSTATEGENERATOR: $("#__VIEWSTATEGENERATOR").attr().value,
                net_Default_LoginCtrl1$txtUserName: helper.userId,
                net_Default_LoginCtrl1$txtUserPwd: tempPassword,
                "net_Default_LoginCtrl1$lbtnLogin.x": 17,
                "net_Default_LoginCtrl1$lbtnLogin.y": 10,
                net_Default_LoginCtrl1$txtSearch1: "",
                Home_Img_NewsCtrl1$hfJsImg: "",
                Home_Img_ActivityCtrl1$hfScript: "",
                Home_Vote_InfoCtrl1$Repeater1$ctl01$hfID: 52,
                Home_Vote_InfoCtrl1$Repeater1$ctl01$rdolstSelect: 221,
            });
        }
        case "gitlab": {
            const data = await (0, network_2.uFetch)(strings_1.GITLAB_LOGIN_URL);
            if (data.includes("sign_out"))
                return data;
            const authenticity_token = cheerio_1.default.load(data)("[name=authenticity_token]").attr().value;
            await (0, network_2.uFetch)(strings_1.GITLAB_AUTH_URL, { authenticity_token });
            const response = await (0, network_2.uFetch)(strings_1.ID_LOGIN_URL, {
                i_user: helper.userId,
                i_pass: helper.password,
                i_captcha: "",
            });
            if (!response.includes("登录成功。正在重定向到")) {
                throw new error_1.IdAuthError();
            }
            const redirectUrl = (0, cheerio_1.default)("a", response).attr().href;
            return await (0, network_2.uFetch)(redirectUrl);
        }
    }
};
exports.roam = roam;
const verifyAndReLogin = async (helper) => {
    try {
        const { object } = await (0, network_2.uFetch)(`${strings_1.USER_DATA_URL}?_csrf=${await (0, exports.getCsrfToken)()}`).then(JSON.parse);
        if (object.ryh === helper.userId) {
            return false;
        }
    }
    catch (_a) {
        //
    }
    const { userId, password, dormPassword } = helper;
    await (0, exports.login)(helper, userId, password, dormPassword);
    return true;
};
const roamingWrapper = async (helper, policy, payload, operation) => {
    try {
        if (policy) {
            try {
                return await operation();
            }
            catch (_a) {
                const result = await (0, exports.roam)(helper, policy, payload);
                return await operation(result);
            }
        }
        else {
            return await operation();
        }
    }
    catch (e) {
        if (await verifyAndReLogin(helper)) {
            if (policy) {
                const result = await (0, exports.roam)(helper, policy, payload);
                return await operation(result);
            }
            else {
                return await operation();
            }
        }
        else {
            throw e;
        }
    }
};
exports.roamingWrapper = roamingWrapper;
const roamingWrapperWithMocks = async (helper, policy, payload, operation, fallback) => helper.mocked()
    ? Promise.resolve(fallback)
    : (0, exports.roamingWrapper)(helper, policy, payload, operation);
exports.roamingWrapperWithMocks = roamingWrapperWithMocks;
//# sourceMappingURL=core.js.map