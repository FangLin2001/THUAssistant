"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchCrCourses = exports.searchCrPrimaryOpen = exports.searchCrRemaining = exports.getCoursePlan = exports.getCrAvailableSemestersMethod = exports.loginCr = exports.getCrCaptchaUrlMethod = void 0;
const strings_1 = require("../constants/strings");
const network_1 = require("../utils/network");
const cheerio_1 = __importDefault(require("cheerio"));
const cheerio_2 = require("../utils/cheerio");
const getCrCaptchaUrlMethod = async () => {
    await (0, network_1.uFetch)(strings_1.CR_LOGIN_HOME_URL);
    return strings_1.CR_CAPTCHA_URL;
};
exports.getCrCaptchaUrlMethod = getCrCaptchaUrlMethod;
const loginCr = async (helper, captcha) => {
    const res = await (0, network_1.uFetch)(strings_1.CR_LOGIN_SUBMIT_URL, {
        j_username: helper.userId,
        j_password: helper.password,
        captchaflag: "login1",
        _login_image_: captcha.toUpperCase(),
    });
    if (!res.includes("本科生选课") && !res.includes("研究生选课")) {
        throw new Error("Failed to login to course registration.");
    }
};
exports.loginCr = loginCr;
const getCrAvailableSemestersMethod = async () => {
    const root = await (0, network_1.uFetch)(strings_1.CR_MAIN_URL);
    const baseSemIdRes = /m=showTree&p_xnxq=(\d\d\d\d-\d\d\d\d-\d)/.exec(root);
    if (baseSemIdRes === null) {
        throw new Error("Please login");
    }
    const $ = await (0, network_1.uFetch)(strings_1.CR_TREE_URL + baseSemIdRes[1]).then(cheerio_1.default.load);
    return $("option").toArray().map((e) => {
        var _a;
        return ({
            id: e.attribs.value,
            name: (_a = e.children[0].data) === null || _a === void 0 ? void 0 : _a.trim(),
        });
    });
};
exports.getCrAvailableSemestersMethod = getCrAvailableSemestersMethod;
const getCoursePlan = async (helper, semester) => {
    const data = await (0, network_1.uFetch)(strings_1.COURSE_PLAN_URL_PREFIX + semester);
    const courses = (0, cheerio_1.default)(".trr2", data);
    const result = [];
    courses.each((_, element) => {
        if (element.type === "tag") {
            const rawItems = (0, cheerio_1.default)(element).children();
            const items = rawItems.length === 7 ? rawItems.slice(2) : rawItems;
            result.push({
                id: (0, cheerio_2.getCheerioText)(items[0], 1),
                name: (0, cheerio_1.default)((0, cheerio_1.default)((0, cheerio_1.default)((0, cheerio_1.default)(items[1]).children()[0]).children()[0]).children()[0]).text().trim(),
                property: (0, cheerio_2.getCheerioText)(items[2], 1),
                credit: Number((0, cheerio_2.getCheerioText)(items[3], 1)),
                group: (0, cheerio_2.getCheerioText)(items[4], 1),
            });
        }
    });
    return result;
};
exports.getCoursePlan = getCoursePlan;
const getText = (e, index) => {
    return (0, cheerio_1.default)(e.children[index]).text().trim();
};
const parseFooter = ($) => {
    const footerText = $("p.yeM").toArray()[0].children[5].data.trim();
    const regResult = /第 (\d+) ?页 \/ 共 (\d+) 页（共 (\d+) 条记录）/.exec(footerText);
    if (regResult === null || regResult.length !== 4) {
        throw new Error("cannot parse cr remaining footer data");
    }
    return regResult.slice(1, 4).map(s => Number(s));
};
const searchCrRemaining = async (helper, { page, semester, id, name, dayOfWeek, period }) => {
    const $ = await (0, network_1.uFetch)(strings_1.CR_SEARCH_URL, {
        m: "kylSearch",
        page: page !== null && page !== void 0 ? page : -1,
        "p_sort.p1": "",
        "p_sort.p2": "",
        "p_sort.asc1": "true",
        "p_sort.asc2": "true",
        p_xnxq: semester,
        pathContent: "课余量查询",
        p_kch: id !== null && id !== void 0 ? id : "",
        p_kxh: "",
        p_kcm: name !== null && name !== void 0 ? name : "",
        p_skxq: dayOfWeek !== null && dayOfWeek !== void 0 ? dayOfWeek : "",
        p_skjc: period !== null && period !== void 0 ? period : "",
        goPageNumber: page !== null && page !== void 0 ? page : 1,
    }, 60000, "GBK").then(cheerio_1.default.load);
    const [currPage, totalPage, totalCount] = parseFooter($);
    const courses = $(".trr2").toArray().map((e) => {
        return {
            id: getText(e, 1),
            seq: Number(getText(e, 3)),
            name: getText(e, 5),
            capacity: Number(getText(e, 7)),
            remaining: Number(getText(e, 9)),
            queue: Number(getText(e, 11)),
            teacher: getText(e, 13),
            time: getText(e, 15),
        };
    });
    return {
        currPage,
        totalPage,
        totalCount,
        courses,
    };
};
exports.searchCrRemaining = searchCrRemaining;
const searchCrPrimaryOpen = async (helper, { page, semester, id, name, dayOfWeek, period }) => {
    const $ = await (0, network_1.uFetch)(strings_1.CR_SEARCH_URL, {
        m: "kkxxSearch",
        page: page !== null && page !== void 0 ? page : -1,
        "p_sort.p1": "",
        "p_sort.p2": "",
        "p_sort.asc1": "true",
        "p_sort.asc2": "true",
        p_xnxq: semester,
        pathContent: "一级课开课信息",
        showtitle: "",
        p_rxklxm: "",
        p_kch: id !== null && id !== void 0 ? id : "",
        p_kcm: name !== null && name !== void 0 ? name : "",
        p_zjjsxm: "",
        p_kkdwnm: "",
        p_kcflm: "",
        p_skxq: dayOfWeek !== null && dayOfWeek !== void 0 ? dayOfWeek : "",
        p_skjc: period !== null && period !== void 0 ? period : "",
        p_xkwzsm: "",
        p_kctsm: "",
        p_ssnj: "",
        goPageNumber: page !== null && page !== void 0 ? page : 1,
    }, 60000, "GBK").then(cheerio_1.default.load);
    const [currPage, totalPage, totalCount] = parseFooter($);
    const courses = $(".trr2").toArray().map((e) => {
        return {
            department: getText(e, 1),
            id: getText(e, 3),
            seq: Number(getText(e, 5)),
            name: getText(e, 7),
            credits: Number(getText(e, 9)),
            teacher: getText(e, 11),
            bksCap: Number(getText(e, 13)),
            yjsCap: Number(getText(e, 15)),
            time: getText(e, 17),
            note: getText(e, 19),
            feature: getText(e, 21),
            year: getText(e, 23),
            secondary: getText(e, 25),
            reUseCap: getText(e, 29),
            restrict: getText(e, 31),
            culture: getText(e, 33),
        };
    });
    return {
        currPage,
        totalPage,
        totalCount,
        courses,
    };
};
exports.searchCrPrimaryOpen = searchCrPrimaryOpen;
const searchCrCourses = async (helper, params) => {
    const [remaining, primaryOpen] = await Promise.all([(0, exports.searchCrRemaining)(helper, params), (0, exports.searchCrPrimaryOpen)(helper, params)]);
    return {
        currPage: remaining.currPage,
        totalPage: remaining.totalPage,
        totalCount: remaining.totalCount,
        courses: primaryOpen.courses.map((e, i) => ({
            ...e,
            capacity: remaining.courses[i].capacity,
            remaining: remaining.courses[i].remaining,
            queue: remaining.courses[i].queue,
        })),
    };
};
exports.searchCrCourses = searchCrCourses;
//# sourceMappingURL=cr.js.map