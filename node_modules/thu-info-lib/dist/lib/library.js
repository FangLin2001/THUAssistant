"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelLibraryRoomBooking = exports.getLibraryRoomBookingRecord = exports.bookLibraryRoom = exports.fuzzySearchLibraryId = exports.getLibraryRoomBookingResourceList = exports.cancelBooking = exports.getBookingRecords = exports.bookLibrarySeat = exports.getLibrarySeatList = exports.getLibraryFloorList = exports.getLibrarySectionList = exports.getLibraryList = void 0;
/* eslint-disable quotes */
const core_1 = require("./core");
const strings_1 = require("../constants/strings");
const library_1 = require("../models/home/library");
const cheerio_1 = __importDefault(require("cheerio"));
const cheerio_2 = require("../utils/cheerio");
const dayjs_1 = __importDefault(require("dayjs"));
const network_1 = require("../utils/network");
const library_2 = require("../mocks/library");
const error_1 = require("../utils/error");
const fetchJson = (url, referer, post) => (0, network_1.uFetch)(url, post).then((s) => JSON.parse(s).data.list);
// This function needs to be updated periodically to avoid bugs
const getLibName = (name, kindName) => {
    if (name.indexOf("北馆") !== -1 || kindName.indexOf("北馆") !== -1) {
        return "NORTH";
    }
    else if (name.indexOf("西馆") !== -1 || kindName.indexOf("西馆") !== -1) {
        return "WEST";
    }
    else if (name.indexOf("文科馆") !== -1 || kindName.indexOf("文科馆") !== -1) {
        return "SOCIAL";
    }
    else {
        return "LAW";
    }
};
const getLibraryList = (helper) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", () => fetchJson(strings_1.LIBRARY_LIST_URL, strings_1.LIBRARY_HOME_URL).then((r) => r.map((node) => ({
    id: node.id,
    zhName: node.name,
    zhNameTrace: node.nameMerge,
    enName: node.enname,
    enNameTrace: node.ennameMerge,
    valid: node.isValid === 1,
}))), library_2.MOCK_LIBRARY_LIST);
exports.getLibraryList = getLibraryList;
const getLibrarySectionList = (helper, { id, zhNameTrace, enNameTrace }, dateChoice) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", () => fetchJson(strings_1.LIBRARY_AREAS_URL +
    id +
    "/date/" +
    (0, dayjs_1.default)().add(dateChoice, "day").format("YYYY-MM-DD")).then((r) => r.childArea
    .map((node) => ({
    id: node.id,
    zhName: node.name,
    zhNameTrace: `${zhNameTrace} - ${node.name}`,
    enName: node.enname,
    enNameTrace: `${enNameTrace} - ${node.enname}`,
    valid: node.isValid === 1,
    total: node.TotalCount,
    available: node.TotalCount - node.UnavailableSpace,
    posX: node.point_x2,
    posY: node.point_y2,
}))
    .sort(library_1.byId)), []);
exports.getLibrarySectionList = getLibrarySectionList;
const getLibraryFloorList = async (helper, { id, zhName, enName }, dateChoice) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", () => fetchJson(strings_1.LIBRARY_AREAS_URL + id, strings_1.LIBRARY_HOME_URL)
    .then((r) => Promise.all(r.childArea.map(async (node) => {
    const floor = {
        id: node.id,
        zhName: node.name,
        zhNameTrace: `${zhName} - ${node.name}`,
        enName: node.enname,
        enNameTrace: `${enName} - ${node.enname}`,
        valid: node.isValid === 1,
        parentId: id,
        available: 0,
        total: 0,
    };
    const [available, total] = (await Promise.all(await (0, exports.getLibrarySectionList)(helper, floor, dateChoice))).reduce(([px, py], curr) => curr.valid ? [px + curr.available, py + curr.total] : [px, py], [0, 0]);
    floor.available = available;
    floor.total = total;
    return floor;
})))
    .then((floors) => floors.sort(library_1.byId)), (0, library_2.MOCK_LIBRARY_FLOOR_LIST)(id, dateChoice));
exports.getLibraryFloorList = getLibraryFloorList;
const getLibraryDay = (sectionId, choice) => fetchJson(strings_1.LIBRARY_DAYS_URL + sectionId).then((r) => {
    const { day, startTime, endTime, id } = r.find((it) => it.day === (0, dayjs_1.default)().add(choice, "day").format("YYYY-MM-DD"));
    const transformDate = ({ date }) => date.substring(11, 16);
    return {
        day,
        startTime: transformDate(startTime),
        endTime: transformDate(endTime),
        segmentId: id,
        today: choice === 0,
    };
});
const pad = (ori, length) => {
    let result = String(ori);
    while (result.length < length) {
        result = "0" + result;
    }
    return result;
};
const currentTime = (coerce) => {
    const date = new Date();
    const result = `${pad(date.getHours(), 2)}:${pad(date.getMinutes(), 2)}`;
    return coerce > result ? coerce : result;
};
const getLibrarySeatList = (helper, { id, zhNameTrace, enNameTrace }, dateChoice) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", () => getLibraryDay(id, dateChoice).then(({ day, startTime, endTime, segmentId, today }) => fetchJson(strings_1.LIBRARY_SEATS_URL + "?" + (0, network_1.stringify)({
    area: id,
    segment: segmentId,
    day,
    startTime: today ? currentTime(startTime) : startTime,
    endTime,
}))
    .then((r) => r
    .map((node) => ({
    id: node.id,
    zhName: node.name,
    zhNameTrace: zhNameTrace + " - " + node.name,
    enName: node.name,
    enNameTrace: enNameTrace + " - " + node.name,
    valid: node.status === 1,
    type: node.area_type,
}))
    .sort((a, b) => (0, library_1.weightedValidityAndId)(a) - (0, library_1.weightedValidityAndId)(b)))), []);
exports.getLibrarySeatList = getLibrarySeatList;
const getAccessToken = (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "id", "ef84f6d6784f6b834e5214f432d6173f/0?/api/id_tsinghua_callback", () => (0, network_1.uFetch)(strings_1.LIBRARY_HOME_URL).then((response) => {
    if (helper.mocked()) {
        return "";
    }
    const leftmost = response.indexOf("access_token");
    const left = response.indexOf('"', leftmost) + 1;
    const right = response.indexOf('"', left);
    const token = response.substring(left, right);
    if (token.trim() === "") {
        throw new error_1.LibraryError("Getting library token failed.");
    }
    return token;
}), library_2.MOCK_LIBRARY_ACCESS_TOKEN);
const bookLibrarySeat = async (helper, { id, type }, section, dateChoice) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", async () => JSON.parse(await getLibraryDay(section.id, dateChoice).then(async ({ segmentId }) => (0, network_1.uFetch)(strings_1.LIBRARY_BOOK_URL_PREFIX + id + strings_1.LIBRARY_BOOK_URL_SUFFIX, {
    access_token: await getAccessToken(helper),
    userid: helper.userId,
    segment: segmentId,
    type,
}))), library_2.MOCK_LIBRARY_BOOK_SEAT_RESPONSE);
exports.bookLibrarySeat = bookLibrarySeat;
const getBookingRecords = async (helper) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", async () => {
    await getAccessToken(helper);
    const html = await (0, network_1.uFetch)(strings_1.LIBRARY_BOOK_RECORD_URL);
    const result = (0, cheerio_1.default)("tbody", html)
        .children()
        .map((index, element) => {
        var _a, _b;
        const delOnclick = (_b = (_a = element.children[15]
            .children[3]) === null || _a === void 0 ? void 0 : _a.attribs) === null || _b === void 0 ? void 0 : _b.onclick;
        const delStrIndex = delOnclick ? delOnclick.indexOf("menuDel") + 9 : 0;
        const rightIndex = delOnclick === null || delOnclick === void 0 ? void 0 : delOnclick.indexOf("'", delStrIndex);
        return {
            id: (0, cheerio_2.getCheerioText)(element, 3),
            pos: (0, cheerio_2.getCheerioText)(element, 5),
            time: (0, cheerio_2.getCheerioText)(element, 7),
            status: (0, cheerio_2.getCheerioText)(element, 11),
            delId: (delOnclick === null || delOnclick === void 0 ? void 0 : delOnclick.includes("menuDel"))
                ? delOnclick === null || delOnclick === void 0 ? void 0 : delOnclick.substring(delStrIndex, rightIndex)
                : undefined,
        };
    })
        .get();
    if (result.length === 0 && html.indexOf("tbody") === -1) {
        throw new error_1.LibraryError();
    }
    return result;
}, library_2.MOCK_LIBRARY_BOOKING_RECORDS);
exports.getBookingRecords = getBookingRecords;
const cancelBooking = async (helper, id) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "ef84f6d6784f6b834e5214f432d6173f", () => getAccessToken(helper)
    .then((token) => (0, network_1.uFetch)(strings_1.CANCEL_BOOKING_URL + id, {
    _method: "delete",
    id,
    userid: helper.userId,
    access_token: token,
}))
    .then(JSON.parse)
    .then((data) => {
    var _a;
    if (!data.status) {
        throw new error_1.LibraryError((_a = data.message) !== null && _a !== void 0 ? _a : data.msg);
    }
}), undefined);
exports.cancelBooking = cancelBooking;
const getLibraryRoomBookingResourceList = async (helper, date) => (0, core_1.roamingWrapperWithMocks)(helper, "cab", "", async () => {
    const result = await (0, network_1.uFetch)(`${strings_1.LIBRARY_ROOM_BOOKING_RESOURCE_LIST_URL_PREFIX}${date}${strings_1.LIBRARY_ROOM_BOOKING_RESOURCE_LIST_URL_SUFFIX}`).then(JSON.parse);
    return result.data.map((item) => ({
        id: item.id,
        name: item.name,
        loc: getLibName(item.name, item.kindName),
        devId: Number(item.devId),
        devName: item.devName,
        kindId: Number(item.kindId),
        kindName: item.kindName,
        classId: Number(item.classId),
        className: item.className,
        labId: Number(item.labId),
        labName: item.labName,
        roomId: Number(item.roomId),
        roomName: item.roomName,
        buildingId: Number(item.buildingId),
        buildingName: item.buildingName,
        limit: item.limit,
        maxMinute: item.max,
        minMinute: item.min,
        cancelMinute: item.cancel,
        maxUser: item.maxUser,
        minUser: item.minUser,
        openStart: item.openStart,
        openEnd: item.openEnd,
        usage: item.ts.map((ts) => ({
            start: ts.start.substring(11),
            end: ts.end.substring(11),
            state: ts.state,
            title: ts.title,
            occupy: ts.occupy,
        })),
    }));
}, library_2.MOCK_LIB_ROOM_RES_LIST);
exports.getLibraryRoomBookingResourceList = getLibraryRoomBookingResourceList;
const fuzzySearchLibraryId = async (helper, keyword) => (0, core_1.roamingWrapperWithMocks)(helper, "cab", "", async () => (0, network_1.uFetch)(strings_1.LIBRARY_FUZZY_SEARCH_ID_URL + encodeURIComponent(keyword)).then(JSON.parse), (0, library_2.MOCK_LIB_SEARCH_RES)(keyword));
exports.fuzzySearchLibraryId = fuzzySearchLibraryId;
const bookLibraryRoom = async (helper, roomRes, start, // yyyy-MM-dd HH:mm
end, // yyyy-MM-dd HH:mm
memberList) => (0, core_1.roamingWrapperWithMocks)(helper, "cab", "", async () => {
    const middle = memberList.length === 0 ? "" : `&min_user=${roomRes.minUser}&max_user=${roomRes.maxUser}&mb_list=$${memberList.join(',')}`;
    const result = await (0, network_1.uFetch)(`${strings_1.LIBRARY_ROOM_BOOKING_ACTION_URL}?dialogid=&dev_id=${roomRes.devId}&lab_id=${roomRes.labId}&kind_id=${roomRes.kindId}&room_id=${roomRes.roomId}&type=dev&prop=&test_id=&term=&Vnumber=&classkind=&test_name=${middle}&start=${start}&end=${end}&start_time=${start.substring(11, 13)}${start.substring(14, 16)}&end_time=${end.substring(11, 13)}${end.substring(14, 16)}&up_file=&memo=&act=set_resv`).then(JSON.parse);
    if (result.ret === -1) {
        throw new error_1.CabError(result.msg);
    }
    return { success: result.ret === 1, msg: result.msg };
}, { success: true, msg: "操作成功！" });
exports.bookLibraryRoom = bookLibraryRoom;
const getLibraryRoomBookingRecord = async (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "cab", "", async () => {
    const result = await (0, network_1.uFetch)(strings_1.LIBRARY_ROOM_BOOKING_RECORD_URL).then(s => JSON.parse(s).msg);
    if (result.includes("没有数据"))
        return [];
    const tables = (0, cheerio_1.default)("tbody", result);
    return tables.map((_, table) => {
        var _a, _b;
        const tableElement = (0, cheerio_1.default)(table);
        const tableAttr = tableElement.attr();
        const tableRow = (0, cheerio_1.default)(tableElement.find("tr").get()[1]).children("td");
        const textPrimary = (0, cheerio_1.default)(tableRow[3]).find(".text-primary").get();
        return {
            regDate: tableAttr.date,
            over: tableAttr.over === "true",
            status: ((_a = tableElement.find(".orange")[0]) !== null && _a !== void 0 ? _a : tableElement.find(".green")[0]).children[0].data,
            name: (0, cheerio_1.default)(tableRow[0]).find(".box > a").text(),
            category: (0, cheerio_1.default)(tableRow[0]).find(".grey").text(),
            owner: tableRow[1].children[0].data,
            members: (0, cheerio_1.default)(tableRow[2]).text(),
            begin: (0, cheerio_1.default)(textPrimary[0]).text(),
            end: (0, cheerio_1.default)(textPrimary[1]).text(),
            description: (0, cheerio_1.default)(tableRow[4]).text(),
            rsvId: (_b = (0, cheerio_1.default)(tableRow[5]).find("[rsvId]").attr()) === null || _b === void 0 ? void 0 : _b.rsvid,
        };
    }).get();
}, library_2.MOCK_LIB_ROOM_RECORD);
exports.getLibraryRoomBookingRecord = getLibraryRoomBookingRecord;
const cancelLibraryRoomBooking = async (helper, id) => (0, core_1.roamingWrapperWithMocks)(helper, "cab", "", async () => {
    const result = await (0, network_1.uFetch)(strings_1.LIBRARY_CANCEL_BOOKING_URL + id).then(JSON.parse);
    if (result.ret === -1) {
        throw new error_1.CabError(result.msg);
    }
    return { success: result.ret === 1, msg: result.msg };
}, { success: true, msg: "操作成功！" });
exports.cancelLibraryRoomBooking = cancelLibraryRoomBooking;
//# sourceMappingURL=library.js.map