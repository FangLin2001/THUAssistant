"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.countdown = exports.getCalendar = exports.getBankPayment = exports.loseCard = exports.getClassroomState = exports.getExpenditures = exports.getPhysicalExamResult = exports.postAssessmentForm = exports.getAssessmentForm = exports.getAssessmentList = exports.getReport = exports.getUserInfo = void 0;
const cheerio_1 = __importDefault(require("cheerio"));
const core_1 = require("./core");
const strings_1 = require("../constants/strings");
const cheerio_2 = require("../utils/cheerio");
const assessment_1 = require("../models/home/assessment");
const xlsx_1 = __importDefault(require("xlsx"));
const dayjs_1 = __importDefault(require("dayjs"));
const network_1 = require("../utils/network");
const basics_1 = require("../mocks/basics");
const error_1 = require("../utils/error");
const getUserInfo = async (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "F315577F5BF20E1B1668EDD594B2C04F", async (param) => {
    if (param === undefined) {
        throw new error_1.LibError();
    }
    else {
        const $ = cheerio_1.default.load(param);
        const fullName = $(".account").text();
        const email = $(".email").text();
        const emailRes = /<(.+?)@mails.tsinghua.edu.cn>/g.exec(email);
        if (emailRes === null || emailRes[1] === undefined) {
            throw new error_1.UserInfoError();
        }
        return { fullName, emailName: emailRes[1] };
    }
}, {
    fullName: "",
    emailName: "",
});
exports.getUserInfo = getUserInfo;
const gradeToOldGPA = new Map([
    ["A-", 3.7],
    ["B+", 3.3],
    ["B", 3.0],
    ["B-", 2.7],
    ["C+", 2.3],
    ["C", 2.0],
    ["C-", 1.7],
    ["D+", 1.3],
    ["D", 1.0],
]);
const getReport = (helper, bx, newGPA, flag = 1) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "B7EF0ADF9406335AD7905B30CD7B49B1", () => Promise.all([
    (0, network_1.uFetch)(helper.graduate() ? strings_1.GET_YJS_REPORT_URL : (`${strings_1.GET_BKS_REPORT_URL}&flag=di${flag}`)),
    bx && flag === 1
        ? (0, network_1.uFetch)(helper.graduate() ? strings_1.YJS_REPORT_BXR_URL : strings_1.BKS_REPORT_BXR_URL)
        : undefined,
]).then(([str, bxStr]) => {
    const bxSet = new Set();
    if (bxStr) {
        const childrenOriginal = (0, cheerio_1.default)(".table-striped tr", bxStr);
        const children = childrenOriginal.slice(1, childrenOriginal.length - 1);
        children.each((index, element) => {
            if (element.type === "tag" && element.children.length === 25) {
                const transformedElement = (0, cheerio_1.default)(element);
                const type = (0, cheerio_2.getCheerioText)(transformedElement.children()[8], 0);
                if (type === "必修" || type === "限选") {
                    bxSet.add((0, cheerio_2.getCheerioText)(transformedElement.children()[0], 0));
                }
            }
        });
    }
    const graduate = helper.graduate();
    const result = (0, cheerio_1.default)("[cellspacing=1] tr", str)
        .slice(1)
        .map((_, element) => {
        var _a;
        const grade = (0, cheerio_2.getCheerioText)(element, graduate ? 9 : 7);
        let point = Number((0, cheerio_2.getCheerioText)(element, graduate ? 11 : 9));
        if (!newGPA) {
            point = (_a = gradeToOldGPA.get(grade)) !== null && _a !== void 0 ? _a : point;
        }
        return bxStr === undefined ||
            bxSet.has((0, cheerio_2.getCheerioText)(element, 1))
            ? {
                name: (0, cheerio_2.getCheerioText)(element, 3),
                credit: Number((0, cheerio_2.getCheerioText)(element, 5)),
                grade,
                point,
                semester: (0, cheerio_2.getCheerioText)(element, graduate ? 13 : 11),
                // eslint-disable-next-line no-mixed-spaces-and-tabs
            }
            : undefined;
    })
        .get();
    if (result.length === 0 && str.indexOf("table1") === -1) {
        throw new error_1.ReportError();
    }
    return result;
}), basics_1.MOCK_REPORT);
exports.getReport = getReport;
const getAssessmentList = (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "0D8B99BA23FD2BA22428D9C8AA0AB508", () => (0, network_1.uFetch)(strings_1.ASSESSMENT_LIST_URL).then((str) => {
    const result = (0, cheerio_1.default)("tbody", str)
        .children()
        .map((index, element) => {
        const onclick = element
            .children[11].firstChild.attribs
            .onclick;
        const href = strings_1.ASSESSMENT_BASE_URL +
            onclick.substring(onclick.indexOf("Body('") + 6, onclick.indexOf("') })"));
        return [
            [
                (0, cheerio_2.getCheerioText)(element, 5),
                (0, cheerio_2.getCheerioText)(element, 9) === "是",
                href,
            ],
        ];
    })
        .get();
    if (result.length === 0) {
        throw new error_1.AssessmentError();
    }
    return result;
}), basics_1.MOCK_ASSESSMENT_LIST);
exports.getAssessmentList = getAssessmentList;
const getAssessmentForm = (helper, url) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "0D8B99BA23FD2BA22428D9C8AA0AB508", () => (0, network_1.uFetch)(url).then((str) => {
    const $ = cheerio_1.default.load(str);
    const basics = $("#xswjtxFormid > input")
        .map((_, element) => new assessment_1.InputTag(element))
        .get();
    const overallSuggestion = new assessment_1.InputTag("kcpgjgDtos[0].jtjy", (0, cheerio_2.getCheerioText)($("textarea")[1]));
    const overallScore = new assessment_1.InputTag($("#kcpjfs")[0]);
    const overall = new assessment_1.Overall(overallSuggestion, overallScore);
    const tabPanes = $(".tab-pane");
    const teachers = (0, assessment_1.toPersons)(tabPanes.first());
    const assistants = (0, assessment_1.toPersons)(tabPanes.first().next().next());
    return new assessment_1.Form(basics, overall, teachers, assistants);
}), (0, basics_1.MOCK_ASSESSMENT_FORM)(url));
exports.getAssessmentForm = getAssessmentForm;
const postAssessmentForm = (helper, form) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "0D8B99BA23FD2BA22428D9C8AA0AB508", () => (0, network_1.uFetch)(strings_1.ASSESSMENT_SUBMIT_URL, form.serialize()).then((res) => {
    if (JSON.parse(res).result !== "success") {
        throw new error_1.AssessmentError(JSON.parse(res).msg);
    }
}), undefined);
exports.postAssessmentForm = postAssessmentForm;
const physicalExamResultTotal = (json) => Number(json.fhltzfs) * 0.15 +
    Number(json.wsmpfs) * 0.2 +
    Number(json.zwtqqfs) * 0.1 +
    Number(json.ldtyfs) * 0.1 +
    Number(json.ytxsfs) * 0.1 +
    Number(json.yqmpfs) * 0.2 +
    Number(json.ywqzfs) * 0.1 +
    Number(json.bbmpfs) * 0.2 +
    Number(json.sgtzfs) * 0.15;
const getPhysicalExamResult = (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "8BF4F9A706589060488B6B6179E462E5", () => (0, network_1.uFetch)(strings_1.PHYSICAL_EXAM_URL).then((s) => {
    const json = JSON.parse(
    // eslint-disable-next-line quotes
    s.replace(/'/g, '"'));
    if (json.success === "false") {
        return [["状态", "暂无可查成绩"]];
    }
    else {
        return [
            ["是否免测", json.sfmc],
            ["免测原因", json.mcyy],
            ["总分", json.zf],
            ["标准分", json.bzf],
            ["附加分", json.fjf],
            ["长跑附加分", json.cpfjf],
            [
                "参考成绩（APP自动结算，仅供参考）",
                physicalExamResultTotal(json),
            ],
            ["身高", json.sg],
            ["体重", json.tz],
            ["身高体重分数", json.sgtzfs],
            ["肺活量", json.fhl],
            ["肺活量分数", json.fhltzfs],
            ["800M跑", json.bbmp],
            ["800M跑分数", json.bbmpfs],
            ["1000M跑", json.yqmp],
            ["1000M跑分数", json.yqmpfs],
            ["50M跑", json.wsmp],
            ["50M跑分数", json.wsmpfs],
            ["立定跳远", json.ldty],
            ["立定跳远分数", json.ldtyfs],
            ["坐位体前屈", json.zwtqq],
            ["坐位体前屈分数", json.zwtqqfs],
            ["仰卧起坐", json.ywqz],
            ["仰卧起坐分数", json.ywqzfs],
            ["引体向上", json.ytxs],
            ["引体向上分数", json.ytxsfs],
            ["体育课成绩", json.tykcj],
        ];
    }
}), basics_1.MOCK_PHYSICAL_EXAM_RESULT);
exports.getPhysicalExamResult = getPhysicalExamResult;
const getExpenditures = (helper, beg, end) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "2B56CC9B3BFFA26932C4110E0C5FB35A", () => (0, network_1.uFetch)(strings_1.EXPENDITURE_URL).then((data) => {
    const workbook = xlsx_1.default.read(data, { sheetStubs: true, cellDates: true });
    const sheet = xlsx_1.default.utils.sheet_to_json(workbook.Sheets.Sheet1, { header: ["index", "locale", "category", "terminal", "date", "value"] });
    const result = sheet.slice(1, sheet.length - 1);
    result.forEach((record) => {
        record.value = Number(record.value);
        if (record.category.match(/^(消费|自助缴费.*|取消充值|领取旧卡余额)$/)) {
            record.value *= -1;
        }
    });
    const remainder = result.reduce((prev, curr) => prev + (curr.category === "领取旧卡余额" ? 0 : curr.value), 0);
    let income = 0;
    let outgo = 0;
    const filtered = result
        .filter((it) => {
        const d = (0, dayjs_1.default)(it.date.split(" ")[0], "YYYY-MM-DD")
            .toDate()
            .valueOf();
        const valid = d >= beg.valueOf() - 86400000 && d <= end.valueOf(); // Locales are nasty.
        if (valid && it.category !== "领取旧卡余额") {
            if (it.value > 0) {
                income += it.value;
            }
            else {
                outgo -= it.value;
            }
        }
        return valid;
    })
        .reverse();
    return [filtered, income, outgo, remainder];
}), basics_1.MOCK_EXPENDITURES);
exports.getExpenditures = getExpenditures;
const getClassroomState = (helper, name, week) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "40470BB47E0849E9EF717983490BC964", () => (0, network_1.uFetch)(strings_1.CLASSROOM_STATE_PREFIX + (0, network_1.arbitraryEncode)(name, "gb2312") + strings_1.CLASSROOM_STATE_MIDDLE + week).then((s) => {
    const result = (0, cheerio_1.default)("#scrollContent>table>tbody", s)
        .map((_, element) => element.children
        .filter((it) => it.type === "tag" && it.tagName === "tr")
        .map((tr) => {
        var _a, _b;
        const id = (_b = (_a = tr.children[1].children[2].data) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : "";
        const status = tr.children
            .slice(3)
            .filter((it) => it.type === "tag" && it.tagName === "td")
            .map((td) => {
            var _a, _b, _c;
            const classNames = (_c = (_b = (_a = td.attribs.class) === null || _a === void 0 ? void 0 : _a.split(" ")) === null || _b === void 0 ? void 0 : _b.filter((it) => it !== "colBound")) !== null && _c !== void 0 ? _c : [];
            if (classNames.length > 1) {
                return 0;
            }
            else {
                switch (classNames[0]) {
                    case "onteaching":
                        return 0;
                    case "onexam":
                        return 1;
                    case "onborrowed":
                        return 2;
                    case "ondisabled":
                        return 3;
                    case undefined:
                        return 5;
                    default:
                        return 4;
                }
            }
        });
        return [id, status];
    }))
        .get();
    if (result.length === 0 && s.indexOf("scrollContent") === -1) {
        throw new error_1.ClassroomStateError();
    }
    return result;
}), basics_1.MOCK_CLASSROOM_STATE);
exports.getClassroomState = getClassroomState;
const loseCard = (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "2B56CC9B3BFFA26932C4110E0C5FB35A", () => (0, network_1.uFetch)(strings_1.LOSE_CARD_URL).then((s) => {
    const index = s.indexOf("var result");
    const left = s.indexOf("=", index) + 1;
    const right = s.indexOf("\n", left);
    const value = s.substring(left, right).trim();
    if (value === "null") {
        throw new error_1.LoseCardError();
    }
    else {
        return Number(value);
    }
}), basics_1.MOCK_LOSE_CARD_CODE);
exports.loseCard = loseCard;
const getBankPayment = async (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "2A5182CB3F36E80395FC2091001BDEA6", async (s) => {
    if (s === undefined) {
        throw new error_1.LibError();
    }
    const options = (0, cheerio_1.default)("option", s).map((_, e) => e.attribs.value).get();
    const form = options.map((o) => `year=${encodeURIComponent(o)}`).join("&");
    const result = await (0, network_1.uFetch)(strings_1.BANK_PAYMENT_SEARCH_URL, form, 60000, "UTF-8", true);
    const $ = cheerio_1.default.load(result);
    const titles = $("div strong")
        .map((_, e) => {
        var _a;
        const text = (_a = e.children[0].data) === null || _a === void 0 ? void 0 : _a.trim();
        if (text === undefined) {
            return undefined;
        }
        const res = /(\d+年\d+月)银行代发结果/g.exec(text);
        if (res === null || res[1] === undefined) {
            return undefined;
        }
        return res[1];
    })
        .get()
        .filter((text) => text !== undefined);
    return $("div table tbody")
        .filter(index => index < titles.length)
        .map((index, e) => {
        const rows = (0, cheerio_1.default)(e).children();
        const data = rows.slice(1, rows.length - 1);
        return {
            month: titles[index],
            payment: data.map((_, row) => {
                const columns = (0, cheerio_1.default)(row).children();
                return {
                    department: (0, cheerio_2.getCheerioText)(columns[1], 0),
                    project: (0, cheerio_2.getCheerioText)(columns[2], 0),
                    usage: (0, cheerio_2.getCheerioText)(columns[3], 0),
                    description: (0, cheerio_2.getCheerioText)(columns[4], 0),
                    bank: (0, cheerio_2.getCheerioText)(columns[5], 0),
                    time: (0, cheerio_2.getCheerioText)(columns[6], 0),
                    total: (0, cheerio_2.getCheerioText)(columns[7].children[0], 0),
                    deduction: (0, cheerio_2.getCheerioText)(columns[8].children[0], 0),
                    actual: (0, cheerio_2.getCheerioText)(columns[9].children[0], 0),
                    deposit: (0, cheerio_2.getCheerioText)(columns[10].children[0], 0),
                    cash: (0, cheerio_2.getCheerioText)(columns[11].children[0], 0),
                };
            }).get(),
        };
    })
        .get();
}, basics_1.MOCK_BANK_PAYMENT);
exports.getBankPayment = getBankPayment;
const getCalendar = async (helper) => (0, core_1.roamingWrapperWithMocks)(helper, undefined, "", async () => {
    const { object } = await (0, network_1.uFetch)(`${strings_1.CALENDAR_URL}?_csrf=${await (0, core_1.getCsrfToken)()}`).then(JSON.parse);
    const firstDay = object.jyzdyt;
    const semesterId = object.xnxq;
    const semesterCode = semesterId[semesterId.length - 1];
    const weekCount = semesterCode === "3" ? 12 : 18;
    return { firstDay, semesterId, weekCount };
}, basics_1.MOCK_CALENDAR_DATA);
exports.getCalendar = getCalendar;
const countdown = async () => {
    const $ = cheerio_1.default.load(await (0, network_1.uFetch)(strings_1.COUNT_DOWN_URL));
    const data = $(".countdown li");
    return data.map((_, e) => (0, cheerio_1.default)(e).text()).get();
};
exports.countdown = countdown;
//# sourceMappingURL=basics.js.map