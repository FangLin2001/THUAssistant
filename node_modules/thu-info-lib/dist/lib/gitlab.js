"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderMarkdown = exports.getProjectFileBlob = exports.getProjectBranches = exports.getProjectTree = exports.getProjectDetail = exports.searchProjects = exports.getStarredProjects = exports.getPersonalProjects = exports.getRecentProjects = exports.getNamespaces = void 0;
const core_1 = require("./core");
const network_1 = require("../utils/network");
const strings_1 = require("../constants/strings");
const error_1 = require("../utils/error");
const gitlab_1 = require("../mocks/gitlab");
const fetchGitLabRaw = async (path, query, post) => {
    try {
        return await (0, network_1.uFetch)(strings_1.GITLAB_API_BASE_URL + path + (query ? `?${(0, network_1.stringify)(query)}` : ""), post ? JSON.stringify(post) : undefined, 60000, "UTF-8", true, "application/json");
    }
    catch (_a) {
        throw new error_1.GitLabApiError();
    }
};
const fetchGitLab = async (path, query, post) => {
    try {
        return await fetchGitLabRaw(path, query, post).then(JSON.parse);
    }
    catch (_a) {
        throw new error_1.GitLabApiError();
    }
};
const probeGitLab = async () => {
    await fetchGitLab("/version");
};
const getNamespaces = async (helper, page) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return await fetchGitLab("/namespaces", { page: page });
}, gitlab_1.MOCK_GIT_NAMESPACES);
exports.getNamespaces = getNamespaces;
const getRecentProjects = async (helper, page) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    const result = await fetchGitLab("/projects", {
        membership: true,
        archived: false,
        simple: true,
        order_by: "last_activity_at",
        page: page,
    });
    if (result.length === 0) {
        await probeGitLab();
    }
    return result;
}, gitlab_1.MOCK_GIT_RECENT_PROJECTS);
exports.getRecentProjects = getRecentProjects;
const getPersonalProjects = async (helper, name, page) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    const result = await fetchGitLab(`/users/${name}/projects`, {
        simple: true,
        order_by: "last_activity_at",
        page: page,
    });
    if (result.length === 0) {
        await probeGitLab();
    }
    return result;
}, gitlab_1.MOCK_GIT_PERSONAL_PROJECTS);
exports.getPersonalProjects = getPersonalProjects;
const getStarredProjects = async (helper, page) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    const result = await fetchGitLab("/projects", {
        starred: true,
        simple: true,
        order_by: "last_activity_at",
        page: page,
    });
    if (result.length === 0) {
        await probeGitLab();
    }
    return result;
}, gitlab_1.MOCK_GIT_RECENT_PROJECTS);
exports.getStarredProjects = getStarredProjects;
const searchProjects = async (helper, search, page) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return await fetchGitLab("/search", { scope: "projects", search, page });
}, []);
exports.searchProjects = searchProjects;
const getProjectDetail = async (helper, id) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return await fetchGitLab(`/projects/${id}`);
}, []);
exports.getProjectDetail = getProjectDetail;
const getProjectTree = async (helper, id, path, ref, page) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return await fetchGitLab(`/projects/${id}/repository/tree`, { path, ref, page });
}, []);
exports.getProjectTree = getProjectTree;
const getProjectBranches = async (helper, id) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return await fetchGitLab(`/projects/${id}/repository/branches`);
}, []);
exports.getProjectBranches = getProjectBranches;
const getProjectFileBlob = async (helper, id, sha) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return await fetchGitLabRaw(`/projects/${id}/repository/blobs/${sha}/raw`);
}, "");
exports.getProjectFileBlob = getProjectFileBlob;
const renderMarkdown = async (helper, text) => (0, core_1.roamingWrapperWithMocks)(helper, "gitlab", "", async () => {
    return (await fetchGitLab("/markdown", undefined, { text })).html;
}, "");
exports.renderMarkdown = renderMarkdown;
//# sourceMappingURL=gitlab.js.map