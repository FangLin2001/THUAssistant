"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sportsIdInfoList = exports.unsubscribeSportsReservation = exports.getSportsReservationRecords = exports.makeSportsReservation = exports.getSportsCaptchaUrlMethod = exports.getSportsResources = exports.updateSportsPhoneNumber = exports.VALID_RECEIPT_TITLES = void 0;
const core_1 = require("./core");
const network_1 = require("../utils/network");
const strings_1 = require("../constants/strings");
const sports_1 = require("../mocks/sports");
const cheerio_1 = __importDefault(require("cheerio"));
const alipay_1 = require("../utils/alipay");
const cheerio_2 = require("../utils/cheerio");
const error_1 = require("../utils/error");
exports.VALID_RECEIPT_TITLES = ["清华大学", "清华大学工会", "清华大学教育基金会"];
const getSportsResourceLimit = async (helper, gymId, itemId, date) => {
    const rawHtml = await (0, network_1.uFetch)(`${strings_1.SPORTS_BASE_URL}&gymnasium_id=${gymId}&item_id=${itemId}&time_date=${date}`);
    const countSearch = /var limitBookCount = '(\d+?)';/.exec(rawHtml);
    const initSearch = /var limitBookInit = '(\d+?)';/.exec(rawHtml);
    if (countSearch === null || initSearch === null) {
        throw new error_1.SportsError("Exception occurred during getting sports resource limit");
    }
    return { count: Number(countSearch[1]), init: Number(initSearch[1]) };
};
const getSportsResourceData = async (helper, gymId, itemId, date) => {
    const rawHtml = await (0, network_1.uFetch)(`${strings_1.SPORTS_DETAIL_URL}&gymnasium_id=${gymId}&item_id=${itemId}&time_date=${date}`);
    const result = {};
    // Step one: get total resources
    const p1 = /resourceArray.push\({id:'(.*?)',time_session:'(.*?)',field_name:'(.*?)',overlaySize:'(.*?)',can_net_book:'(.*?)'}\);/g;
    for (let r1 = p1.exec(rawHtml); r1 != null; r1 = p1.exec(rawHtml)) {
        result[r1[1]] = {
            resId: r1[1],
            timeSession: r1[2],
            fieldName: r1[3],
            overlaySize: Number(r1[4]),
            canNetBook: r1[5] === "1",
        };
    }
    // Step two: update cost
    const p2 = /addCost\('(.*?)','(.*?)'\);/g;
    for (let r2 = p2.exec(rawHtml); r2 != null; r2 = p2.exec(rawHtml)) {
        if (result[r2[1]] !== undefined) {
            result[r2[1]].cost = Number(r2[2]);
        }
    }
    // Step three: mark res status
    const p3 = /markResStatus\('(.*?)','(.*?)','(.*?)'\);/g;
    for (let r3 = p3.exec(rawHtml); r3 != null; r3 = p3.exec(rawHtml)) {
        if (result[r3[2]] !== undefined) {
            result[r3[2]].bookId = r3[1];
            result[r3[2]].locked = r3[3] === "1";
        }
    }
    // Step four: mark status color
    const p4 = /markStatusColor\('(.*?)','(.*?)','(.*?)','(.*?)'\);/g;
    for (let r4 = p4.exec(rawHtml); r4 != null; r4 = p4.exec(rawHtml)) {
        if (result[r4[1]] !== undefined) {
            result[r4[1]].userType = r4[2];
            result[r4[1]].paymentStatus = r4[3] === "1";
        }
    }
    return Object.keys(result).map(key => result[key]);
};
const getSportsPhoneNumber = async () => (0, network_1.uFetch)(strings_1.SPORTS_QUERY_PHONE_URL).then((msg) => msg === "do_not" ? undefined : msg);
const updateSportsPhoneNumber = async (helper, phone) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "5539ECF8CD815C7D3F5A8EE0A2D72441", async () => {
    if (!/^(1[3-9][0-9]|15[036789]|18[89])\d{8}$/.test(phone)) {
        throw new error_1.SportsError("请正确填写手机号码!");
    }
    const response = await (0, network_1.uFetch)(`${strings_1.SPORTS_UPDATE_PHONE_URL}${phone}&gzzh=${helper.userId}`, {});
    if (response.includes("找回密码")) {
        throw new error_1.LibError();
    }
}, undefined);
exports.updateSportsPhoneNumber = updateSportsPhoneNumber;
const getSportsResources = async (helper, gymId, itemId, date) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "5539ECF8CD815C7D3F5A8EE0A2D72441", async () => Promise.all([
    getSportsResourceLimit(helper, gymId, itemId, date),
    getSportsPhoneNumber(),
    getSportsResourceData(helper, gymId, itemId, date),
]).then(([{ count, init }, phone, data]) => ({ count, init, phone, data })), sports_1.MOCK_RESOURCES);
exports.getSportsResources = getSportsResources;
const getSportsCaptchaUrlMethod = () => `${strings_1.SPORTS_CAPTCHA_BASE_URL}?${Math.floor(Math.random() * 100)}=`;
exports.getSportsCaptchaUrlMethod = getSportsCaptchaUrlMethod;
const makeSportsReservation = async (helper, totalCost, phone, receiptTitle, gymId, itemId, date, // yyyy-MM-dd
captcha, fieldId) => {
    if (helper.mocked()) {
        return undefined;
    }
    const orderResult = await (0, network_1.uFetch)(strings_1.SPORTS_MAKE_ORDER_URL, {
        "bookData.totalCost": totalCost,
        "bookData.book_person_zjh": "",
        "bookData.book_person_name": "",
        "bookData.book_person_phone": phone,
        "bookData.book_mode": "from-phone",
        "item_idForCache": itemId,
        "time_dateForCache": date,
        "userTypeNumForCache": 1,
        "putongRes": "putongRes",
        "code": captcha,
        "selectedPayWay": 1,
        "allFieldTime": `${fieldId}#${date}`,
    }).then(JSON.parse);
    if (orderResult.msg !== "预定成功") {
        throw new error_1.SportsError(orderResult.msg);
    }
    if (totalCost === 0)
        return undefined;
    const paymentResultForm = await (0, network_1.uFetch)(strings_1.SPORTS_MAKE_PAYMENT_URL, {
        is_jsd: receiptTitle === undefined ? "0" : "1",
        xm: receiptTitle,
        gymnasium_idForCache: gymId,
        item_idForCache: itemId,
        time_dateForCache: date,
        userTypeNumForCache: 1,
        allFieldTime: `${fieldId}#${date}`,
    }, 60000, "GBK").then((s) => cheerio_1.default.load(s)("form"));
    const paymentApiHtml = await (0, network_1.uFetch)(paymentResultForm.attr().action, paymentResultForm.serialize(), 60000, "UTF-8", true);
    const searchResult = /var id = '(.*)?';\s*?var token = '(.*)?';/.exec(paymentApiHtml);
    if (searchResult === null) {
        throw new error_1.SportsError("id and token not found.");
    }
    const paymentCheckResult = await (0, network_1.uFetch)(strings_1.SPORTS_PAYMENT_CHECK_URL, {
        id: searchResult[1],
        token: searchResult[2],
    }).then(JSON.parse);
    if (paymentCheckResult.code !== "0") {
        throw new error_1.SportsError("Payment check failed: " + paymentCheckResult.message);
    }
    const inputs = cheerio_1.default.load(paymentApiHtml)("#payForm input");
    const postForm = {};
    inputs.each((_, element) => {
        const { attribs } = element;
        postForm[attribs.name] = attribs.value;
    });
    postForm.channelId = "0101";
    return (0, alipay_1.generalGetPayCode)(await (0, network_1.uFetch)(strings_1.SPORTS_PAYMENT_ACTION_URL, postForm));
};
exports.makeSportsReservation = makeSportsReservation;
const getSportsReservationRecords = async (helper) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "5539ECF8CD815C7D3F5A8EE0A2D72441", async () => {
    const $ = await (0, network_1.uFetch)(strings_1.SPORTS_BASE_URL + "&gymnasium_id=4836273").then(cheerio_1.default.load);
    const tables = $("table");
    if (tables.length === 0) {
        throw new error_1.SportsError();
    }
    const rows = (0, cheerio_1.default)(tables.toArray()[tables.length - 1]).find("tbody tr");
    const getId = (e) => {
        try {
            const s0 = (e.children[9].children[1].attribs.onclick);
            const res0 = /unsubscribe\('(.+?)'/.exec(s0);
            if (res0 === null) {
                const s1 = (e.children[9].children[4].children[3].attribs.onclick);
                const res1 = /unsubscribeOnline\('(.+?)'/.exec(s1);
                if (res1 === null)
                    return undefined;
                return res1[1];
            }
            return res0[1];
        }
        catch (_a) {
            return undefined;
        }
    };
    return rows.toArray().map((e) => ({
        name: (0, cheerio_2.getCheerioText)(e, 1),
        field: (0, cheerio_2.getCheerioText)(e, 3),
        time: (0, cheerio_2.getCheerioText)(e, 5),
        price: (0, cheerio_2.getCheerioText)(e, 7),
        bookId: getId(e),
    }));
}, sports_1.MOCK_RECORDS);
exports.getSportsReservationRecords = getSportsReservationRecords;
const unsubscribeSportsReservation = async (helper, bookId) => (0, core_1.roamingWrapperWithMocks)(helper, "default", "5539ECF8CD815C7D3F5A8EE0A2D72441", async () => {
    await (0, network_1.uFetch)(strings_1.SPORTS_UNSUBSCRIBE_URL, { bookId });
}, undefined);
exports.unsubscribeSportsReservation = unsubscribeSportsReservation;
exports.sportsIdInfoList = [
    {
        name: "气膜馆羽毛球场",
        gymId: "3998000",
        itemId: "4045681",
    },
    {
        name: "气膜馆乒乓球场",
        gymId: "3998000",
        itemId: "4037036",
    },
    {
        name: "综体篮球场",
        gymId: "4797914",
        itemId: "4797898",
    },
    {
        name: "综体羽毛球场",
        gymId: "4797914",
        itemId: "4797899",
    },
    {
        name: "西体羽毛球场",
        gymId: "4836273",
        itemId: "4836196",
    },
    {
        name: "西体台球",
        gymId: "4836273",
        itemId: "14567218",
    },
    {
        name: "紫荆网球场",
        gymId: "5843934",
        itemId: "5845263",
    },
    {
        name: "西网球场",
        gymId: "5843934",
        itemId: "10120539",
    },
];
//# sourceMappingURL=sports.js.map