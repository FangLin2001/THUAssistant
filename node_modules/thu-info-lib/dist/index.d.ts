import { LibBookRecord, LibFuzzySearchResult, Library, LibraryFloor, LibrarySeat, LibrarySection, LibRoomBookRecord, LibRoomRes } from "./models/home/library";
import { Course } from "./models/home/report";
import { Form } from "./models/home/assessment";
import { Record } from "./models/home/expenditure";
import { NewsSlice, SourceTag } from "./models/news/news";
import { ValidReceiptTypes } from "./lib/sports";
import { SearchParams } from "./models/cr/cr";
import { BankPaymentByMonth } from "./models/home/bank";
import { CalendarData } from "./models/schedule/calendar";
export declare class InfoHelper {
    userId: string;
    password: string;
    dormPassword: string;
    MOCK: string;
    mocked: () => boolean;
    graduate: () => boolean;
    clearCookieHandler: () => Promise<void>;
    login: (auth: {
        userId?: string;
        password?: string;
        dormPassword?: string;
    }) => Promise<void>;
    logout: () => Promise<void>;
    getUserInfo: () => Promise<{
        fullName: string;
        emailName: string;
    }>;
    getReport: (bx: boolean, newGPA: boolean, flag?: number) => Promise<Course[]>;
    getAssessmentList: () => Promise<[string, boolean, string][]>;
    getAssessmentForm: (url: string) => Promise<Form>;
    postAssessmentForm: (form: Form) => Promise<void>;
    getPhysicalExamResult: () => Promise<[string, string][]>;
    getExpenditures: (beg: Date, end: Date) => Promise<[Record[], number, number, number]>;
    getClassroomState: (name: string, week: number) => Promise<[string, number[]][]>;
    loseCard: () => Promise<number>;
    getBankPayment: () => Promise<BankPaymentByMonth[]>;
    getCalendar: () => Promise<CalendarData>;
    getCountdown: () => Promise<string[]>;
    getEleRechargePayCode: (money: number) => Promise<string>;
    getElePayRecord: () => Promise<[string, string, string, string, string, string][]>;
    getEleRemainder: () => Promise<number>;
    getLibraryList: () => Promise<Library[]>;
    getLibrarySectionList: (libraryFloor: LibraryFloor, dateChoice: 0 | 1) => Promise<LibrarySection[]>;
    getLibraryFloorList: (library: Library, dateChoice: 0 | 1) => Promise<LibraryFloor[]>;
    getLibrarySeatList: (librarySection: LibrarySection, dateChoice: 0 | 1) => Promise<LibrarySeat[]>;
    bookLibrarySeat: (librarySeat: LibrarySeat, section: LibrarySection, dateChoice: 0 | 1) => Promise<{
        status: number;
        msg: string;
    }>;
    getBookingRecords: () => Promise<LibBookRecord[]>;
    cancelBooking: (id: string) => Promise<void>;
    getLibraryRoomBookingResourceList: (date: string) => Promise<LibRoomRes[]>;
    fuzzySearchLibraryId: (keyword: string) => Promise<LibFuzzySearchResult[]>;
    bookLibraryRoom: (roomRes: LibRoomRes, start: string, end: string, memberList: string[]) => Promise<{
        success: boolean;
        msg: string;
    }>;
    getLibraryRoomBookingRecord: () => Promise<LibRoomBookRecord[]>;
    cancelLibraryRoomBooking: (id: string) => Promise<{
        success: boolean;
        msg: string;
    }>;
    getNewsList: (page: number, length: number, channel?: SourceTag | undefined) => Promise<NewsSlice[]>;
    getNewsDetail: (url: string) => Promise<[string, string, string]>;
    getSchedule: () => Promise<import("./models/schedule/schedule").Schedule[]>;
    getCrCaptchaUrl: () => Promise<string>;
    loginCr: (captcha: string) => Promise<void>;
    getCrAvailableSemesters: () => Promise<import("./models/cr/cr").CrSemester[]>;
    getCrCoursePlan: (semester: string) => Promise<import("./models/cr/cr").CoursePlan[]>;
    searchCrRemaining: (params: SearchParams) => Promise<import("./models/cr/cr").CrRemainingSearchResult>;
    searchCrPrimaryOpen: (params: SearchParams) => Promise<import("./models/cr/cr").CrPrimaryOpenSearchResult>;
    searchCrCourses: (params: SearchParams) => Promise<import("./models/cr/cr").CrSearchResult>;
    getSportsResources: (gymId: string, itemId: string, date: string) => Promise<import("./models/home/sports").SportsResourcesInfo>;
    updateSportsPhoneNumber: (phone: string) => Promise<void>;
    getSportsCaptchaUrl: () => string;
    makeSportsReservation: (totalCost: number, phone: string, receiptTitle: ValidReceiptTypes | undefined, gymId: string, itemId: string, date: string, captcha: string, fieldId: string) => Promise<string | undefined>;
    getSportsReservationRecords: () => Promise<import("./models/home/sports").SportsReservationRecord[]>;
    unsubscribeSportsReservation: (bookId: string) => Promise<void | undefined>;
    getGitNamespaces: (page: number) => Promise<import("./models/gitlab/gitlab").Namespace[]>;
    getGitRecentProjects: (page: number) => Promise<import("./models/gitlab/gitlab").Project[]>;
    getGitOwnedProjects: (name: string, page: number) => Promise<import("./models/gitlab/gitlab").Project[]>;
    searchGitProjects: (search: string, page: number) => Promise<import("./models/gitlab/gitlab").Project[]>;
    getGitStarredProjects: (page: number) => Promise<import("./models/gitlab/gitlab").Project[]>;
    getGitProjectDetail: (id: number) => Promise<import("./models/gitlab/gitlab").ProjectDetail>;
    getGitProjectTree: (id: number, path: string, ref: string, page: number) => Promise<import("./models/gitlab/gitlab").File[]>;
    getGitProjectBranches: (id: number) => Promise<import("./models/gitlab/gitlab").Branch[]>;
    getGitProjectFileBlob: (id: number, sha: string) => Promise<string>;
    renderGitMarkdown: (text: string) => Promise<string>;
}
export declare class Water {
    id: string;
    num: string;
    num1: string;
    lid: string;
    address: string;
    phone: string;
    getUserInformation: (id: string) => Promise<import("./lib/water").WaterUserInformation>;
    getUserInformationAndStore: (id: string) => Promise<void>;
    postWaterSubmission: (num: string, num1: string, lid: string) => Promise<void>;
}
