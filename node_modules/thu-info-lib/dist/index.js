"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Water = exports.InfoHelper = void 0;
const basics_1 = require("./lib/basics");
const core_1 = require("./lib/core");
const dorm_1 = require("./lib/dorm");
const water_1 = require("./lib/water");
const library_1 = require("./lib/library");
const news_1 = require("./lib/news");
const schedule_1 = require("./lib/schedule");
const sports_1 = require("./lib/sports");
const cr_1 = require("./lib/cr");
const gitlab_1 = require("./lib/gitlab");
class InfoHelper {
    constructor() {
        this.userId = "";
        this.password = "";
        this.dormPassword = "";
        this.MOCK = "8888";
        this.mocked = () => this.userId === this.MOCK && this.password === this.MOCK;
        this.graduate = () => this.userId.length > 4 ? (this.userId[4] === "2" || this.userId[4] === "3") : false;
        this.clearCookieHandler = async () => {
        };
        this.login = async (auth) => { var _a, _b, _c; return (0, core_1.login)(this, (_a = auth.userId) !== null && _a !== void 0 ? _a : this.userId, (_b = auth.password) !== null && _b !== void 0 ? _b : this.password, (_c = auth.dormPassword) !== null && _c !== void 0 ? _c : this.dormPassword); };
        this.logout = async () => (0, core_1.logout)(this);
        this.getUserInfo = async () => (0, basics_1.getUserInfo)(this);
        this.getReport = (bx, newGPA, flag = 1) => (0, basics_1.getReport)(this, bx, newGPA, flag);
        this.getAssessmentList = () => (0, basics_1.getAssessmentList)(this);
        this.getAssessmentForm = (url) => (0, basics_1.getAssessmentForm)(this, url);
        this.postAssessmentForm = (form) => (0, basics_1.postAssessmentForm)(this, form);
        this.getPhysicalExamResult = () => (0, basics_1.getPhysicalExamResult)(this);
        this.getExpenditures = (beg, end) => (0, basics_1.getExpenditures)(this, beg, end);
        this.getClassroomState = (name, week) => (0, basics_1.getClassroomState)(this, name, week);
        this.loseCard = async () => (0, basics_1.loseCard)(this);
        this.getBankPayment = async () => (0, basics_1.getBankPayment)(this);
        this.getCalendar = async () => (0, basics_1.getCalendar)(this);
        this.getCountdown = async () => (0, basics_1.countdown)();
        this.getEleRechargePayCode = async (money) => (0, dorm_1.getEleRechargePayCode)(this, money);
        this.getElePayRecord = async () => (0, dorm_1.getElePayRecord)(this);
        this.getEleRemainder = async () => (0, dorm_1.getEleRemainder)(this);
        this.getLibraryList = async () => (0, library_1.getLibraryList)(this);
        this.getLibrarySectionList = async (libraryFloor, dateChoice) => (0, library_1.getLibrarySectionList)(this, libraryFloor, dateChoice);
        this.getLibraryFloorList = async (library, dateChoice) => (0, library_1.getLibraryFloorList)(this, library, dateChoice);
        this.getLibrarySeatList = async (librarySection, dateChoice) => (0, library_1.getLibrarySeatList)(this, librarySection, dateChoice);
        this.bookLibrarySeat = async (librarySeat, section, dateChoice) => (0, library_1.bookLibrarySeat)(this, librarySeat, section, dateChoice);
        this.getBookingRecords = async () => (0, library_1.getBookingRecords)(this);
        this.cancelBooking = async (id) => (0, library_1.cancelBooking)(this, id);
        this.getLibraryRoomBookingResourceList = async (date) => (0, library_1.getLibraryRoomBookingResourceList)(this, date);
        this.fuzzySearchLibraryId = async (keyword) => (0, library_1.fuzzySearchLibraryId)(this, keyword);
        this.bookLibraryRoom = async (roomRes, start, // yyyy-MM-dd HH:mm
        end, // yyyy-MM-dd HH:mm
        memberList) => (0, library_1.bookLibraryRoom)(this, roomRes, start, end, memberList);
        this.getLibraryRoomBookingRecord = async () => (0, library_1.getLibraryRoomBookingRecord)(this);
        this.cancelLibraryRoomBooking = async (id) => (0, library_1.cancelLibraryRoomBooking)(this, id);
        this.getNewsList = async (page, length, channel) => (0, news_1.getNewsList)(this, page, length, channel);
        this.getNewsDetail = async (url) => (0, news_1.getNewsDetail)(this, url);
        this.getSchedule = async () => (0, schedule_1.getSchedule)(this);
        this.getCrCaptchaUrl = async () => (0, cr_1.getCrCaptchaUrlMethod)();
        this.loginCr = async (captcha) => (0, cr_1.loginCr)(this, captcha);
        this.getCrAvailableSemesters = async () => (0, cr_1.getCrAvailableSemestersMethod)();
        this.getCrCoursePlan = async (semester) => (0, cr_1.getCoursePlan)(this, semester);
        this.searchCrRemaining = async (params) => (0, cr_1.searchCrRemaining)(this, params);
        this.searchCrPrimaryOpen = async (params) => (0, cr_1.searchCrPrimaryOpen)(this, params);
        this.searchCrCourses = async (params) => (0, cr_1.searchCrCourses)(this, params);
        this.getSportsResources = async (gymId, itemId, date) => (0, sports_1.getSportsResources)(this, gymId, itemId, date);
        this.updateSportsPhoneNumber = async (phone) => (0, sports_1.updateSportsPhoneNumber)(this, phone);
        this.getSportsCaptchaUrl = () => (0, sports_1.getSportsCaptchaUrlMethod)();
        this.makeSportsReservation = async (totalCost, phone, receiptTitle, gymId, itemId, date, // yyyy-MM-dd
        captcha, fieldId) => (0, sports_1.makeSportsReservation)(this, totalCost, phone, receiptTitle, gymId, itemId, date, captcha, fieldId);
        this.getSportsReservationRecords = async () => (0, sports_1.getSportsReservationRecords)(this);
        this.unsubscribeSportsReservation = async (bookId) => (0, sports_1.unsubscribeSportsReservation)(this, bookId);
        this.getGitNamespaces = async (page) => (0, gitlab_1.getNamespaces)(this, page);
        this.getGitRecentProjects = async (page) => (0, gitlab_1.getRecentProjects)(this, page);
        this.getGitOwnedProjects = async (name, page) => (0, gitlab_1.getPersonalProjects)(this, name, page);
        this.searchGitProjects = async (search, page) => (0, gitlab_1.searchProjects)(this, search, page);
        this.getGitStarredProjects = async (page) => (0, gitlab_1.getStarredProjects)(this, page);
        this.getGitProjectDetail = async (id) => (0, gitlab_1.getProjectDetail)(this, id);
        this.getGitProjectTree = async (id, path, ref, page) => (0, gitlab_1.getProjectTree)(this, id, path, ref, page);
        this.getGitProjectBranches = async (id) => (0, gitlab_1.getProjectBranches)(this, id);
        this.getGitProjectFileBlob = async (id, sha) => (0, gitlab_1.getProjectFileBlob)(this, id, sha);
        this.renderGitMarkdown = async (text) => (0, gitlab_1.renderMarkdown)(this, text);
    }
}
exports.InfoHelper = InfoHelper;
class Water {
    constructor() {
        this.id = ""; // 档案号
        this.num = ""; // 订水量
        this.num1 = ""; // 订水票量
        this.lid = ""; // 水种类
        this.address = ""; // 地址
        this.phone = ""; // 电话
        /*
        "6":清紫源泉矿泉水（高端）
        "10":燕园泉矿泉水（高端）
        "12":农夫山泉桶装水（19L）
        "11":清紫源泉矿泉水
        "8":喜士天然矿泉水（大）
        "9":喜士天然矿泉水（小）
        "1":娃哈哈矿泉水
        "7":娃哈哈纯净水
        "5":清紫源泉纯净水
        */
        this.getUserInformation = async (id) => (0, water_1.getUserInformation)(this, id);
        this.getUserInformationAndStore = async (id) => (0, water_1.getUserInformationAndStore)(this, id);
        this.postWaterSubmission = async (num, num1, lid) => (0, water_1.postWaterSubmission)(this, num, num1, lid);
    }
}
exports.Water = Water;
//# sourceMappingURL=index.js.map