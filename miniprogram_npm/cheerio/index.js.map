{"version":3,"sources":["index.js","types.js","load.js","options.js","static.js","parsers/parse5-adapter.js","parsers/htmlparser2-adapter.js","cheerio.js","parse.js","utils.js","api/attributes.js","api/traversing.js","api/manipulation.js","api/css.js","api/forms.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,AENA,ADGA;AJaA,AENA,ACHA,AENA,ADGA;AJaA,AENA,ACHA,AENA,ADGA;AJaA,AENA,ACHA,AGTA,ADGA,ADGA;AJaA,AENA,ACHA,AGTA,ADGA,ADGA;AJaA,AENA,ACHA,AGTA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AGTA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AGTA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AGTA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AKfA,AFMA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AKfA,AFMA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AKfA,AFMA,ADGA,ADGA;AGRA,APqBA,AENA,ACHA,AKfA,AFMA,ADGA,ADGA,AKfA;AFOA,APqBA,AENA,ACHA,AKfA,AFMA,ADGA,ADGA,AKfA;AFOA,APqBA,AENA,ACHA,AKfA,AHSA,ADGA,AKfA;ACFA,AHSA,APqBA,AENA,ACHA,AKfA,AHSA,ADGA,AKfA;ACFA,AHSA,APqBA,AENA,ACHA,AKfA,AHSA,ADGA,AKfA;ACFA,AHSA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,ACHA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,ACHA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,ACHA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AENA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AENA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AENA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AHSA,ADGA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AENA,AMlBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,APqBA,AQxBA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,ACHA,AJYA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ACHA,AFMA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AGTA,ADGA,ADGA,AJYA,AHSA,AKfA;ACFA,AENA,ADGA,AJYA,AHSA,AKfA;ACFA,AENA,ADGA,AJYA,AHSA,AKfA;ACFA,AENA,ADGA,APqBA,AKfA;ACFA,AENA,ADGA,APqBA,AKfA;ACFA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjBA,AENA,ADGA,APqBA;AMjfile":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.root = exports.parseHTML = exports.merge = exports.contains = void 0;\nvar tslib_1 = require(\"tslib\");\n/**\n * Types used in signatures of Cheerio methods.\n *\n * @category Cheerio\n */\ntslib_1.__exportStar(require(\"./types\"), exports);\ntslib_1.__exportStar(require(\"./load\"), exports);\nvar load_1 = require(\"./load\");\n/**\n * The default cheerio instance.\n *\n * @deprecated Use the function returned by `load` instead.\n */\nexports.default = load_1.load([]);\nvar staticMethods = tslib_1.__importStar(require(\"./static\"));\n/**\n * In order to promote consistency with the jQuery library, users are encouraged\n * to instead use the static method of the same name.\n *\n * @deprecated\n * @example\n *\n * ```js\n * const $ = cheerio.load('<div><p></p></div>');\n *\n * $.contains($('div').get(0), $('p').get(0));\n * //=> true\n *\n * $.contains($('p').get(0), $('div').get(0));\n * //=> false\n * ```\n *\n * @returns {boolean}\n */\nexports.contains = staticMethods.contains;\n/**\n * In order to promote consistency with the jQuery library, users are encouraged\n * to instead use the static method of the same name.\n *\n * @deprecated\n * @example\n *\n * ```js\n * const $ = cheerio.load('');\n *\n * $.merge([1, 2], [3, 4]);\n * //=> [1, 2, 3, 4]\n * ```\n */\nexports.merge = staticMethods.merge;\n/**\n * In order to promote consistency with the jQuery library, users are encouraged\n * to instead use the static method of the same name as it is defined on the\n * \"loaded\" Cheerio factory function.\n *\n * @deprecated See {@link static/parseHTML}.\n * @example\n *\n * ```js\n * const $ = cheerio.load('');\n * $.parseHTML('<b>markup</b>');\n * ```\n */\nexports.parseHTML = staticMethods.parseHTML;\n/**\n * Users seeking to access the top-level element of a parsed document should\n * instead use the `root` static method of a \"loaded\" Cheerio function.\n *\n * @deprecated\n * @example\n *\n * ```js\n * const $ = cheerio.load('');\n * $.root();\n * ```\n */\nexports.root = staticMethods.root;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.load = void 0;\nvar tslib_1 = require(\"tslib\");\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\nvar staticMethods = tslib_1.__importStar(require(\"./static\"));\nvar cheerio_1 = require(\"./cheerio\");\nvar parse_1 = tslib_1.__importDefault(require(\"./parse\"));\n/**\n * Create a querying function, bound to a document created from the provided\n * markup. Note that similar to web browser contexts, this operation may\n * introduce `<html>`, `<head>`, and `<body>` elements; set `isDocument` to\n * `false` to switch to fragment mode and disable this.\n *\n * @param content - Markup to be loaded.\n * @param options - Options for the created instance.\n * @param isDocument - Allows parser to be switched to fragment mode.\n * @returns The loaded document.\n * @see {@link https://cheerio.js.org#loading} for additional usage information.\n */\nfunction load(content, options, isDocument) {\n    if (isDocument === void 0) { isDocument = true; }\n    if (content == null) {\n        throw new Error('cheerio.load() expects a string');\n    }\n    var internalOpts = tslib_1.__assign(tslib_1.__assign({}, options_1.default), options_1.flatten(options));\n    var root = parse_1.default(content, internalOpts, isDocument);\n    /** Create an extended class here, so that extensions only live on one instance. */\n    var LoadedCheerio = /** @class */ (function (_super) {\n        tslib_1.__extends(LoadedCheerio, _super);\n        function LoadedCheerio() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return LoadedCheerio;\n    }(cheerio_1.Cheerio));\n    function initialize(selector, context, r, opts) {\n        if (r === void 0) { r = root; }\n        return new LoadedCheerio(selector, context, r, tslib_1.__assign(tslib_1.__assign({}, internalOpts), options_1.flatten(opts)));\n    }\n    // Add in static methods & properties\n    Object.assign(initialize, staticMethods, {\n        load: load,\n        // `_root` and `_options` are used in static methods.\n        _root: root,\n        _options: internalOpts,\n        // Add `fn` for plugins\n        fn: LoadedCheerio.prototype,\n        // Add the prototype here to maintain `instanceof` behavior.\n        prototype: LoadedCheerio.prototype,\n    });\n    return initialize;\n}\nexports.load = load;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatten = void 0;\nvar tslib_1 = require(\"tslib\");\nvar defaultOpts = {\n    xml: false,\n    decodeEntities: true,\n};\n/** Cheerio default options. */\nexports.default = defaultOpts;\nvar xmlModeDefault = {\n    _useHtmlParser2: true,\n    xmlMode: true,\n};\nfunction flatten(options) {\n    return (options === null || options === void 0 ? void 0 : options.xml)\n        ? typeof options.xml === 'boolean'\n            ? xmlModeDefault\n            : tslib_1.__assign(tslib_1.__assign({}, xmlModeDefault), options.xml)\n        : options !== null && options !== void 0 ? options : undefined;\n}\nexports.flatten = flatten;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\nvar tslib_1 = require(\"tslib\");\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\nvar cheerio_select_1 = require(\"cheerio-select\");\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\nfunction render(that, dom, options) {\n    var _a;\n    var toRender = dom\n        ? typeof dom === 'string'\n            ? cheerio_select_1.select(dom, (_a = that === null || that === void 0 ? void 0 : that._root) !== null && _a !== void 0 ? _a : [], options)\n            : dom\n        : that === null || that === void 0 ? void 0 : that._root.children;\n    if (!toRender)\n        return '';\n    return options.xmlMode || options._useHtmlParser2\n        ? htmlparser2_adapter_1.render(toRender, options)\n        : parse5_adapter_1.render(toRender);\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\nfunction isOptions(dom) {\n    return (typeof dom === 'object' &&\n        dom != null &&\n        !('length' in dom) &&\n        !('type' in dom));\n}\nfunction html(dom, options) {\n    /*\n     * Be flexible about parameters, sometimes we call html(),\n     * with options as only parameter\n     * check dom argument for dom element specific properties\n     * assume there is no 'length' or 'type' properties in the options object\n     */\n    if (!options && isOptions(dom)) {\n        options = dom;\n        dom = undefined;\n    }\n    /*\n     * Sometimes `$.html()` is used without preloading html,\n     * so fallback non-existing options to the default ones.\n     */\n    var opts = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), (this ? this._options : {})), options_1.flatten(options !== null && options !== void 0 ? options : {}));\n    return render(this || undefined, dom, opts);\n}\nexports.html = html;\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\nfunction xml(dom) {\n    var options = tslib_1.__assign(tslib_1.__assign({}, this._options), { xmlMode: true });\n    return render(this, dom, options);\n}\nexports.xml = xml;\n/**\n * Render the document as text.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\nfunction text(elements) {\n    var elems = elements ? elements : this ? this.root() : [];\n    var ret = '';\n    for (var i = 0; i < elems.length; i++) {\n        var elem = elems[i];\n        if (htmlparser2_1.DomUtils.isText(elem))\n            ret += elem.data;\n        else if (htmlparser2_1.DomUtils.hasChildren(elem) &&\n            elem.type !== htmlparser2_1.ElementType.Comment &&\n            elem.type !== htmlparser2_1.ElementType.Script &&\n            elem.type !== htmlparser2_1.ElementType.Style) {\n            ret += text(elem.children);\n        }\n    }\n    return ret;\n}\nexports.text = text;\nfunction parseHTML(data, context, keepScripts) {\n    if (keepScripts === void 0) { keepScripts = typeof context === 'boolean' ? context : false; }\n    if (!data || typeof data !== 'string') {\n        return null;\n    }\n    if (typeof context === 'boolean') {\n        keepScripts = context;\n    }\n    var parsed = this.load(data, options_1.default, false);\n    if (!keepScripts) {\n        parsed('script').remove();\n    }\n    /*\n     * The `children` array is used by Cheerio internally to group elements that\n     * share the same parents. When nodes created through `parseHTML` are\n     * inserted into previously-existing DOM structures, they will be removed\n     * from the `children` array. The results of `parseHTML` should remain\n     * constant across these operations, so a shallow copy should be returned.\n     */\n    return parsed.root()[0].children.slice();\n}\nexports.parseHTML = parseHTML;\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\nfunction root() {\n    return this(this._root);\n}\nexports.root = root;\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\nfunction contains(container, contained) {\n    // According to the jQuery API, an element does not \"contain\" itself\n    if (contained === container) {\n        return false;\n    }\n    /*\n     * Step up the descendants, stopping when the root element is reached\n     * (signaled by `.parent` returning a reference to the same object)\n     */\n    var next = contained;\n    while (next && next !== next.parent) {\n        next = next.parent;\n        if (next === container) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.contains = contains;\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\nfunction merge(arr1, arr2) {\n    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n        return;\n    }\n    var newLength = arr1.length;\n    var len = +arr2.length;\n    for (var i = 0; i < len; i++) {\n        arr1[newLength++] = arr2[i];\n    }\n    arr1.length = newLength;\n    return arr1;\n}\nexports.merge = merge;\n/**\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\nfunction isArrayLike(item) {\n    if (Array.isArray(item)) {\n        return true;\n    }\n    if (typeof item !== 'object' ||\n        !Object.prototype.hasOwnProperty.call(item, 'length') ||\n        typeof item.length !== 'number' ||\n        item.length < 0) {\n        return false;\n    }\n    for (var i = 0; i < item.length; i++) {\n        if (!(i in item)) {\n            return false;\n        }\n    }\n    return true;\n}\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.render = exports.parse = void 0;\nvar tslib_1 = require(\"tslib\");\nvar domhandler_1 = require(\"domhandler\");\nvar parse5_1 = require(\"parse5\");\nvar parse5_htmlparser2_tree_adapter_1 = tslib_1.__importDefault(require(\"parse5-htmlparser2-tree-adapter\"));\nfunction parse(content, options, isDocument) {\n    var opts = {\n        scriptingEnabled: typeof options.scriptingEnabled === 'boolean'\n            ? options.scriptingEnabled\n            : true,\n        treeAdapter: parse5_htmlparser2_tree_adapter_1.default,\n        sourceCodeLocationInfo: options.sourceCodeLocationInfo,\n    };\n    var context = options.context;\n    // @ts-expect-error The tree adapter unfortunately doesn't return the exact types.\n    return isDocument\n        ? parse5_1.parse(content, opts)\n        : // @ts-expect-error Same issue again.\n            parse5_1.parseFragment(context, content, opts);\n}\nexports.parse = parse;\nfunction render(dom) {\n    var _a;\n    /*\n     * `dom-serializer` passes over the special \"root\" node and renders the\n     * node's children in its place. To mimic this behavior with `parse5`, an\n     * equivalent operation must be applied to the input array.\n     */\n    var nodes = 'length' in dom ? dom : [dom];\n    for (var index = 0; index < nodes.length; index += 1) {\n        var node = nodes[index];\n        if (domhandler_1.isDocument(node)) {\n            (_a = Array.prototype.splice).call.apply(_a, tslib_1.__spreadArray([nodes, index, 1], node.children));\n        }\n    }\n    // @ts-expect-error Types don't align here either.\n    return parse5_1.serialize({ children: nodes }, { treeAdapter: parse5_htmlparser2_tree_adapter_1.default });\n}\nexports.render = render;\n","\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.render = exports.parse = void 0;\nvar htmlparser2_1 = require(\"htmlparser2\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return htmlparser2_1.parseDocument; } });\nvar dom_serializer_1 = require(\"dom-serializer\");\nObject.defineProperty(exports, \"render\", { enumerable: true, get: function () { return __importDefault(dom_serializer_1).default; } });\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cheerio = void 0;\nvar tslib_1 = require(\"tslib\");\nvar parse_1 = tslib_1.__importDefault(require(\"./parse\"));\nvar options_1 = tslib_1.__importDefault(require(\"./options\"));\nvar utils_1 = require(\"./utils\");\nvar Attributes = tslib_1.__importStar(require(\"./api/attributes\"));\nvar Traversing = tslib_1.__importStar(require(\"./api/traversing\"));\nvar Manipulation = tslib_1.__importStar(require(\"./api/manipulation\"));\nvar Css = tslib_1.__importStar(require(\"./api/css\"));\nvar Forms = tslib_1.__importStar(require(\"./api/forms\"));\nvar Cheerio = /** @class */ (function () {\n    /**\n     * Instance of cheerio. Methods are specified in the modules. Usage of this\n     * constructor is not recommended. Please use $.load instead.\n     *\n     * @private\n     * @param selector - The new selection.\n     * @param context - Context of the selection.\n     * @param root - Sets the root node.\n     * @param options - Options for the instance.\n     */\n    function Cheerio(selector, context, root, options) {\n        var _this = this;\n        if (options === void 0) { options = options_1.default; }\n        this.length = 0;\n        this.options = options;\n        // $(), $(null), $(undefined), $(false)\n        if (!selector)\n            return this;\n        if (root) {\n            if (typeof root === 'string')\n                root = parse_1.default(root, this.options, false);\n            this._root = new this.constructor(root, null, null, this.options);\n            // Add a cyclic reference, so that calling methods on `_root` never fails.\n            this._root._root = this._root;\n        }\n        // $($)\n        if (utils_1.isCheerio(selector))\n            return selector;\n        var elements = typeof selector === 'string' && utils_1.isHtml(selector)\n            ? // $(<html>)\n                parse_1.default(selector, this.options, false).children\n            : isNode(selector)\n                ? // $(dom)\n                    [selector]\n                : Array.isArray(selector)\n                    ? // $([dom])\n                        selector\n                    : null;\n        if (elements) {\n            elements.forEach(function (elem, idx) {\n                _this[idx] = elem;\n            });\n            this.length = elements.length;\n            return this;\n        }\n        // We know that our selector is a string now.\n        var search = selector;\n        var searchContext = !context\n            ? // If we don't have a context, maybe we have a root, from loading\n                this._root\n            : typeof context === 'string'\n                ? utils_1.isHtml(context)\n                    ? // $('li', '<ul>...</ul>')\n                        this._make(parse_1.default(context, this.options, false))\n                    : // $('li', 'ul')\n                        ((search = context + \" \" + search), this._root)\n                : utils_1.isCheerio(context)\n                    ? // $('li', $)\n                        context\n                    : // $('li', node), $('li', [nodes])\n                        this._make(context);\n        // If we still don't have a context, return\n        if (!searchContext)\n            return this;\n        /*\n         * #id, .class, tag\n         */\n        // @ts-expect-error No good way to type this — we will always return `Cheerio<Element>` here.\n        return searchContext.find(search);\n    }\n    /**\n     * Make a cheerio object.\n     *\n     * @private\n     * @param dom - The contents of the new object.\n     * @param context - The context of the new object.\n     * @returns The new cheerio object.\n     */\n    Cheerio.prototype._make = function (dom, context) {\n        var cheerio = new this.constructor(dom, context, this._root, this.options);\n        cheerio.prevObject = this;\n        return cheerio;\n    };\n    return Cheerio;\n}());\nexports.Cheerio = Cheerio;\n/** Set a signature of the object. */\nCheerio.prototype.cheerio = '[cheerio object]';\n/*\n * Make cheerio an array-like object\n */\nCheerio.prototype.splice = Array.prototype.splice;\n// Support for (const element of $(...)) iteration:\nCheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n// Plug in the API\nObject.assign(Cheerio.prototype, Attributes, Traversing, Manipulation, Css, Forms);\nfunction isNode(obj) {\n    return (!!obj.name ||\n        obj.type === 'root' ||\n        obj.type === 'text' ||\n        obj.type === 'comment');\n}\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.update = void 0;\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\nvar domhandler_1 = require(\"domhandler\");\n/*\n * Parser\n */\nfunction parse(content, options, isDocument) {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n        content = content.toString();\n    }\n    if (typeof content === 'string') {\n        return options.xmlMode || options._useHtmlParser2\n            ? htmlparser2_adapter_1.parse(content, options)\n            : parse5_adapter_1.parse(content, options, isDocument);\n    }\n    var doc = content;\n    if (!Array.isArray(doc) && domhandler_1.isDocument(doc)) {\n        // If `doc` is already a root, just return it\n        return doc;\n    }\n    // Add conent to new root element\n    var root = new domhandler_1.Document([]);\n    // Update the DOM using the root\n    update(doc, root);\n    return root;\n}\nexports.default = parse;\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param newChilds - The new children.\n * @param parent - The new parent.\n * @returns The parent node.\n */\nfunction update(newChilds, parent) {\n    // Normalize\n    var arr = Array.isArray(newChilds) ? newChilds : [newChilds];\n    // Update parent\n    if (parent) {\n        parent.children = arr;\n    }\n    else {\n        parent = null;\n    }\n    // Update neighbors\n    for (var i = 0; i < arr.length; i++) {\n        var node = arr[i];\n        // Cleanly remove existing nodes from their previous structures.\n        if (node.parent && node.parent.children !== arr) {\n            htmlparser2_1.DomUtils.removeElement(node);\n        }\n        if (parent) {\n            node.prev = arr[i - 1] || null;\n            node.next = arr[i + 1] || null;\n        }\n        else {\n            node.prev = node.next = null;\n        }\n        node.parent = parent;\n    }\n    return parent;\n}\nexports.update = update;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - DOM node to check.\n * @returns Whether the node is a tag.\n */\nexports.isTag = htmlparser2_1.DomUtils.isTag;\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nfunction isCheerio(maybeCheerio) {\n    return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in camel case notation.\n */\nfunction camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, function (_, x) { return x.toUpperCase(); });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in \"CSS case\".\n */\nfunction cssCase(str) {\n    return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - Array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nfunction domEach(array, fn) {\n    var len = array.length;\n    for (var i = 0; i < len; i++)\n        fn(array[i], i);\n    return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The htmlparser2-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nfunction cloneDom(dom) {\n    var clone = 'length' in dom\n        ? Array.prototype.map.call(dom, function (el) { return domhandler_1.cloneNode(el, true); })\n        : [domhandler_1.cloneNode(dom, true)];\n    // Add a root node around the cloned nodes\n    var root = new domhandler_1.Document(clone);\n    clone.forEach(function (node) {\n        node.parent = root;\n    });\n    return clone;\n}\nexports.cloneDom = cloneDom;\n/**\n * A simple way to check for HTML strings. Tests for a `<` within a string,\n * immediate followed by a letter and eventually followed by a `>`.\n *\n * @private\n */\nvar quickExpr = /<[a-zA-Z][^]*>/;\n/**\n * Check if string is HTML.\n *\n * @private\n * @category Utils\n * @param str - String to check.\n * @returns Indicates if `str` is HTML.\n */\nfunction isHtml(str) {\n    // Run the regex\n    return quickExpr.test(str);\n}\nexports.isHtml = isHtml;\n","\n/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toggleClass = exports.removeClass = exports.addClass = exports.hasClass = exports.removeAttr = exports.val = exports.data = exports.prop = exports.attr = void 0;\nvar static_1 = require(\"../static\");\nvar utils_1 = require(\"../utils\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-';\n/*\n * Lookup table for coercing string data-* attributes to their corresponding\n * JavaScript primitives\n */\nvar primitives = {\n    null: null,\n    true: true,\n    false: false,\n};\n// Attributes that are booleans\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nvar rbrace = /^{[^]*}$|^\\[[^]*]$/;\nfunction getAttr(elem, name, xmlMode) {\n    var _a;\n    if (!elem || !utils_1.isTag(elem))\n        return undefined;\n    (_a = elem.attribs) !== null && _a !== void 0 ? _a : (elem.attribs = {});\n    // Return the entire attribs object if no attribute specified\n    if (!name) {\n        return elem.attribs;\n    }\n    if (hasOwn.call(elem.attribs, name)) {\n        // Get the (decoded) attribute\n        return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];\n    }\n    // Mimic the DOM and return text content as value for `option's`\n    if (elem.name === 'option' && name === 'value') {\n        return static_1.text(elem.children);\n    }\n    // Mimic DOM with default value for radios/checkboxes\n    if (elem.name === 'input' &&\n        (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&\n        name === 'value') {\n        return 'on';\n    }\n    return undefined;\n}\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is `null`.\n *\n * @private\n * @param el - The element to set the attribute on.\n * @param name - The attribute's name.\n * @param value - The attribute's value.\n */\nfunction setAttr(el, name, value) {\n    if (value === null) {\n        removeAttribute(el, name);\n    }\n    else {\n        el.attribs[name] = \"\" + value;\n    }\n}\nfunction attr(name, value) {\n    // Set the value (with attr map support)\n    if (typeof name === 'object' || value !== undefined) {\n        if (typeof value === 'function') {\n            if (typeof name !== 'string') {\n                {\n                    throw new Error('Bad combination of arguments.');\n                }\n            }\n            return utils_1.domEach(this, function (el, i) {\n                if (utils_1.isTag(el))\n                    setAttr(el, name, value.call(el, i, el.attribs[name]));\n            });\n        }\n        return utils_1.domEach(this, function (el) {\n            if (!utils_1.isTag(el))\n                return;\n            if (typeof name === 'object') {\n                Object.keys(name).forEach(function (objName) {\n                    var objValue = name[objName];\n                    setAttr(el, objName, objValue);\n                });\n            }\n            else {\n                setAttr(el, name, value);\n            }\n        });\n    }\n    return arguments.length > 1\n        ? this\n        : getAttr(this[0], name, this.options.xmlMode);\n}\nexports.attr = attr;\n/**\n * Gets a node's prop.\n *\n * @private\n * @category Attributes\n * @param el - Elenent to get the prop of.\n * @param name - Name of the prop.\n * @returns The prop's value.\n */\nfunction getProp(el, name, xmlMode) {\n    if (!el || !utils_1.isTag(el))\n        return;\n    return name in el\n        ? // @ts-expect-error TS doesn't like us accessing the value directly here.\n            el[name]\n        : !xmlMode && rboolean.test(name)\n            ? getAttr(el, name, false) !== undefined\n            : getAttr(el, name, xmlMode);\n}\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param el - The element to set the prop on.\n * @param name - The prop's name.\n * @param value - The prop's value.\n */\nfunction setProp(el, name, value, xmlMode) {\n    if (name in el) {\n        // @ts-expect-error Overriding value\n        el[name] = value;\n    }\n    else {\n        setAttr(el, name, !xmlMode && rboolean.test(name) ? (value ? '' : null) : \"\" + value);\n    }\n}\nfunction prop(name, value) {\n    var _this = this;\n    if (typeof name === 'string' && value === undefined) {\n        switch (name) {\n            case 'style': {\n                var property_1 = this.css();\n                var keys = Object.keys(property_1);\n                keys.forEach(function (p, i) {\n                    property_1[i] = p;\n                });\n                property_1.length = keys.length;\n                return property_1;\n            }\n            case 'tagName':\n            case 'nodeName': {\n                var el = this[0];\n                return utils_1.isTag(el) ? el.name.toUpperCase() : undefined;\n            }\n            case 'outerHTML':\n                return this.clone().wrap('<container />').parent().html();\n            case 'innerHTML':\n                return this.html();\n            default:\n                return getProp(this[0], name, this.options.xmlMode);\n        }\n    }\n    if (typeof name === 'object' || value !== undefined) {\n        if (typeof value === 'function') {\n            if (typeof name === 'object') {\n                throw new Error('Bad combination of arguments.');\n            }\n            return utils_1.domEach(this, function (el, i) {\n                if (utils_1.isTag(el))\n                    setProp(el, name, value.call(el, i, getProp(el, name, _this.options.xmlMode)), _this.options.xmlMode);\n            });\n        }\n        return utils_1.domEach(this, function (el) {\n            if (!utils_1.isTag(el))\n                return;\n            if (typeof name === 'object') {\n                Object.keys(name).forEach(function (key) {\n                    var val = name[key];\n                    setProp(el, key, val, _this.options.xmlMode);\n                });\n            }\n            else {\n                setProp(el, name, value, _this.options.xmlMode);\n            }\n        });\n    }\n    return undefined;\n}\nexports.prop = prop;\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param el - The element to set the data attribute on.\n * @param name - The data attribute's name.\n * @param value - The data attribute's value.\n */\nfunction setData(el, name, value) {\n    var _a;\n    var elem = el;\n    (_a = elem.data) !== null && _a !== void 0 ? _a : (elem.data = {});\n    if (typeof name === 'object')\n        Object.assign(elem.data, name);\n    else if (typeof name === 'string' && value !== undefined) {\n        elem.data[name] = value;\n    }\n}\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store. If no\n * attribute name is specified, read *all* HTML5 `data-*` attributes in this manner.\n *\n * @private\n * @category Attributes\n * @param el - Elenent to get the data attribute of.\n * @param name - Name of the data attribute.\n * @returns The data attribute's value, or a map with all of the data attribute.\n */\nfunction readData(el, name) {\n    var domNames;\n    var jsNames;\n    var value;\n    if (name == null) {\n        domNames = Object.keys(el.attribs).filter(function (attrName) {\n            return attrName.startsWith(dataAttrPrefix);\n        });\n        jsNames = domNames.map(function (domName) {\n            return utils_1.camelCase(domName.slice(dataAttrPrefix.length));\n        });\n    }\n    else {\n        domNames = [dataAttrPrefix + utils_1.cssCase(name)];\n        jsNames = [name];\n    }\n    for (var idx = 0; idx < domNames.length; ++idx) {\n        var domName = domNames[idx];\n        var jsName = jsNames[idx];\n        if (hasOwn.call(el.attribs, domName) &&\n            !hasOwn.call(el.data, jsName)) {\n            value = el.attribs[domName];\n            if (hasOwn.call(primitives, value)) {\n                value = primitives[value];\n            }\n            else if (value === String(Number(value))) {\n                value = Number(value);\n            }\n            else if (rbrace.test(value)) {\n                try {\n                    value = JSON.parse(value);\n                }\n                catch (e) {\n                    /* Ignore */\n                }\n            }\n            el.data[jsName] = value;\n        }\n    }\n    return name == null ? el.data : value;\n}\nfunction data(name, value) {\n    var _a;\n    var elem = this[0];\n    if (!elem || !utils_1.isTag(elem))\n        return;\n    var dataEl = elem;\n    (_a = dataEl.data) !== null && _a !== void 0 ? _a : (dataEl.data = {});\n    // Return the entire data object if no data specified\n    if (!name) {\n        return readData(dataEl);\n    }\n    // Set the value (with attr map support)\n    if (typeof name === 'object' || value !== undefined) {\n        utils_1.domEach(this, function (el) {\n            if (utils_1.isTag(el))\n                if (typeof name === 'object')\n                    setData(el, name);\n                else\n                    setData(el, name, value);\n        });\n        return this;\n    }\n    if (hasOwn.call(dataEl.data, name)) {\n        return dataEl.data[name];\n    }\n    return readData(dataEl, name);\n}\nexports.data = data;\nfunction val(value) {\n    var querying = arguments.length === 0;\n    var element = this[0];\n    if (!element || !utils_1.isTag(element))\n        return querying ? undefined : this;\n    switch (element.name) {\n        case 'textarea':\n            return this.text(value);\n        case 'select': {\n            var option = this.find('option:selected');\n            if (!querying) {\n                if (this.attr('multiple') == null && typeof value === 'object') {\n                    return this;\n                }\n                this.find('option').removeAttr('selected');\n                var values = typeof value !== 'object' ? [value] : value;\n                for (var i = 0; i < values.length; i++) {\n                    this.find(\"option[value=\\\"\" + values[i] + \"\\\"]\").attr('selected', '');\n                }\n                return this;\n            }\n            return this.attr('multiple')\n                ? option.toArray().map(function (el) { return static_1.text(el.children); })\n                : option.attr('value');\n        }\n        case 'input':\n        case 'option':\n            return querying\n                ? this.attr('value')\n                : this.attr('value', value);\n    }\n    return undefined;\n}\nexports.val = val;\n/**\n * Remove an attribute.\n *\n * @private\n * @param elem - Node to remove attribute from.\n * @param name - Name of the attribute to remove.\n */\nfunction removeAttribute(elem, name) {\n    if (!elem.attribs || !hasOwn.call(elem.attribs, name))\n        return;\n    delete elem.attribs[name];\n}\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @category Attributes\n * @param names - Names to split.\n * @returns - Split names.\n */\nfunction splitNames(names) {\n    return names ? names.trim().split(rspace) : [];\n}\n/**\n * Method for removing attributes by `name`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeAttr('class').html();\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite');\n * $('.apple').removeAttr('id class').html();\n * //=> <li>Apple</li>\n * ```\n *\n * @param name - Name of the attribute.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\nfunction removeAttr(name) {\n    var attrNames = splitNames(name);\n    var _loop_1 = function (i) {\n        utils_1.domEach(this_1, function (elem) {\n            if (utils_1.isTag(elem))\n                removeAttribute(elem, attrNames[i]);\n        });\n    };\n    var this_1 = this;\n    for (var i = 0; i < attrNames.length; i++) {\n        _loop_1(i);\n    }\n    return this;\n}\nexports.removeAttr = removeAttr;\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').hasClass('pear');\n * //=> true\n *\n * $('apple').hasClass('fruit');\n * //=> false\n *\n * $('li').hasClass('pear');\n * //=> true\n * ```\n *\n * @param className - Name of the class.\n * @returns Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\nfunction hasClass(className) {\n    return this.toArray().some(function (elem) {\n        var clazz = utils_1.isTag(elem) && elem.attribs.class;\n        var idx = -1;\n        if (clazz && className.length) {\n            while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n                var end = idx + className.length;\n                if ((idx === 0 || rspace.test(clazz[idx - 1])) &&\n                    (end === clazz.length || rspace.test(clazz[end]))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    });\n}\nexports.hasClass = hasClass;\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').addClass('fruit').html();\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').html();\n * //=> <li class=\"apple fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of new class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\nfunction addClass(value) {\n    // Support functions\n    if (typeof value === 'function') {\n        return utils_1.domEach(this, function (el, i) {\n            if (utils_1.isTag(el)) {\n                var className = el.attribs.class || '';\n                addClass.call([el], value.call(el, i, className));\n            }\n        });\n    }\n    // Return if no value or not a string or function\n    if (!value || typeof value !== 'string')\n        return this;\n    var classNames = value.split(rspace);\n    var numElements = this.length;\n    for (var i = 0; i < numElements; i++) {\n        var el = this[i];\n        // If selected element isn't a tag, move on\n        if (!utils_1.isTag(el))\n            continue;\n        // If we don't already have classes — always set xmlMode to false here, as it doesn't matter for classes\n        var className = getAttr(el, 'class', false);\n        if (!className) {\n            setAttr(el, 'class', classNames.join(' ').trim());\n        }\n        else {\n            var setClass = \" \" + className + \" \";\n            // Check if class already exists\n            for (var j = 0; j < classNames.length; j++) {\n                var appendClass = classNames[j] + \" \";\n                if (!setClass.includes(\" \" + appendClass))\n                    setClass += appendClass;\n            }\n            setAttr(el, 'class', setClass.trim());\n        }\n    }\n    return this;\n}\nexports.addClass = addClass;\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeClass('pear').html();\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().html();\n * //=> <li class=\"\">Apple</li>\n * ```\n *\n * @param name - Name of the class. If not specified, removes all elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\nfunction removeClass(name) {\n    // Handle if value is a function\n    if (typeof name === 'function') {\n        return utils_1.domEach(this, function (el, i) {\n            if (utils_1.isTag(el))\n                removeClass.call([el], name.call(el, i, el.attribs.class || ''));\n        });\n    }\n    var classes = splitNames(name);\n    var numClasses = classes.length;\n    var removeAll = arguments.length === 0;\n    return utils_1.domEach(this, function (el) {\n        if (!utils_1.isTag(el))\n            return;\n        if (removeAll) {\n            // Short circuit the remove all case as this is the nice one\n            el.attribs.class = '';\n        }\n        else {\n            var elClasses = splitNames(el.attribs.class);\n            var changed = false;\n            for (var j = 0; j < numClasses; j++) {\n                var index = elClasses.indexOf(classes[j]);\n                if (index >= 0) {\n                    elClasses.splice(index, 1);\n                    changed = true;\n                    /*\n                     * We have to do another pass to ensure that there are not duplicate\n                     * classes listed\n                     */\n                    j--;\n                }\n            }\n            if (changed) {\n                el.attribs.class = elClasses.join(' ');\n            }\n        }\n    });\n}\nexports.removeClass = removeClass;\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple.green').toggleClass('fruit green red').html();\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).html();\n * //=> <li class=\"apple green fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of the class. Can also be a function.\n * @param stateVal - If specified the state of the class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\nfunction toggleClass(value, stateVal) {\n    // Support functions\n    if (typeof value === 'function') {\n        return utils_1.domEach(this, function (el, i) {\n            if (utils_1.isTag(el)) {\n                toggleClass.call([el], value.call(el, i, el.attribs.class || '', stateVal), stateVal);\n            }\n        });\n    }\n    // Return if no value or not a string or function\n    if (!value || typeof value !== 'string')\n        return this;\n    var classNames = value.split(rspace);\n    var numClasses = classNames.length;\n    var state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;\n    var numElements = this.length;\n    for (var i = 0; i < numElements; i++) {\n        var el = this[i];\n        // If selected element isn't a tag, move on\n        if (!utils_1.isTag(el))\n            continue;\n        var elementClasses = splitNames(el.attribs.class);\n        // Check if class already exists\n        for (var j = 0; j < numClasses; j++) {\n            // Check if the class name is currently defined\n            var index = elementClasses.indexOf(classNames[j]);\n            // Add if stateValue === true or we are toggling and there is no value\n            if (state >= 0 && index < 0) {\n                elementClasses.push(classNames[j]);\n            }\n            else if (state <= 0 && index >= 0) {\n                // Otherwise remove but only if the item exists\n                elementClasses.splice(index, 1);\n            }\n        }\n        el.attribs.class = elementClasses.join(' ');\n    }\n    return this;\n}\nexports.toggleClass = toggleClass;\n","\n/**\n * Methods for traversing the DOM structure.\n *\n * @module cheerio/traversing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addBack = exports.add = exports.end = exports.slice = exports.index = exports.toArray = exports.get = exports.eq = exports.last = exports.first = exports.has = exports.not = exports.is = exports.filterArray = exports.filter = exports.map = exports.each = exports.contents = exports.children = exports.siblings = exports.prevUntil = exports.prevAll = exports.prev = exports.nextUntil = exports.nextAll = exports.next = exports.closest = exports.parentsUntil = exports.parents = exports.parent = exports.find = void 0;\nvar tslib_1 = require(\"tslib\");\nvar domhandler_1 = require(\"domhandler\");\nvar select = tslib_1.__importStar(require(\"cheerio-select\"));\nvar utils_1 = require(\"../utils\");\nvar static_1 = require(\"../static\");\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar uniqueSort = htmlparser2_1.DomUtils.uniqueSort;\nvar reSiblingSelector = /^\\s*[~+]/;\n/**\n * Get the descendants of each element in the current set of matched elements,\n * filtered by a selector, jQuery object, or element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').find('li').length;\n * //=> 3\n * $('#fruits').find($('.apple')).length;\n * //=> 1\n * ```\n *\n * @param selectorOrHaystack - Element to look for.\n * @returns The found elements.\n * @see {@link https://api.jquery.com/find/}\n */\nfunction find(selectorOrHaystack) {\n    var _a;\n    if (!selectorOrHaystack) {\n        return this._make([]);\n    }\n    var context = this.toArray();\n    if (typeof selectorOrHaystack !== 'string') {\n        var haystack = utils_1.isCheerio(selectorOrHaystack)\n            ? selectorOrHaystack.toArray()\n            : [selectorOrHaystack];\n        return this._make(haystack.filter(function (elem) { return context.some(function (node) { return static_1.contains(node, elem); }); }));\n    }\n    var elems = reSiblingSelector.test(selectorOrHaystack)\n        ? context\n        : this.children().toArray();\n    var options = {\n        context: context,\n        root: (_a = this._root) === null || _a === void 0 ? void 0 : _a[0],\n        xmlMode: this.options.xmlMode,\n    };\n    return this._make(select.select(selectorOrHaystack, elems, options));\n}\nexports.find = find;\n/**\n * Creates a matcher, using a particular mapping function. Matchers provide a\n * function that finds elements using a generating function, supporting filtering.\n *\n * @private\n * @param matchMap - Mapping function.\n * @returns - Function for wrapping generating functions.\n */\nfunction _getMatcher(matchMap) {\n    return function (fn) {\n        var postFns = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            postFns[_i - 1] = arguments[_i];\n        }\n        return function (selector) {\n            var _a;\n            var matched = matchMap(fn, this);\n            if (selector) {\n                matched = filterArray(matched, selector, this.options.xmlMode, (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]);\n            }\n            return this._make(\n            // Post processing is only necessary if there is more than one element.\n            this.length > 1 && matched.length > 1\n                ? postFns.reduce(function (elems, fn) { return fn(elems); }, matched)\n                : matched);\n        };\n    };\n}\n/** Matcher that adds multiple elements for each entry in the input. */\nvar _matcher = _getMatcher(function (fn, elems) {\n    var _a;\n    var ret = [];\n    for (var i = 0; i < elems.length; i++) {\n        var value = fn(elems[i]);\n        ret.push(value);\n    }\n    return (_a = new Array()).concat.apply(_a, ret);\n});\n/** Matcher that adds at most one element for each entry in the input. */\nvar _singleMatcher = _getMatcher(function (fn, elems) {\n    var ret = [];\n    for (var i = 0; i < elems.length; i++) {\n        var value = fn(elems[i]);\n        if (value !== null) {\n            ret.push(value);\n        }\n    }\n    return ret;\n});\n/**\n * Matcher that supports traversing until a condition is met.\n *\n * @returns A function usable for `*Until` methods.\n */\nfunction _matchUntil(nextElem) {\n    var postFns = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        postFns[_i - 1] = arguments[_i];\n    }\n    // We use a variable here that is used from within the matcher.\n    var matches = null;\n    var innerMatcher = _getMatcher(function (nextElem, elems) {\n        var matched = [];\n        utils_1.domEach(elems, function (elem) {\n            for (var next_1; (next_1 = nextElem(elem)); elem = next_1) {\n                // FIXME: `matched` might contain duplicates here and the index is too large.\n                if (matches === null || matches === void 0 ? void 0 : matches(next_1, matched.length))\n                    break;\n                matched.push(next_1);\n            }\n        });\n        return matched;\n    }).apply(void 0, tslib_1.__spreadArray([nextElem], postFns));\n    return function (selector, filterSelector) {\n        var _this = this;\n        // Override `matches` variable with the new target.\n        matches =\n            typeof selector === 'string'\n                ? function (elem) { return select.is(elem, selector, _this.options); }\n                : selector\n                    ? getFilterFn(selector)\n                    : null;\n        var ret = innerMatcher.call(this, filterSelector);\n        // Set `matches` to `null`, so we don't waste memory.\n        matches = null;\n        return ret;\n    };\n}\nfunction _removeDuplicates(elems) {\n    return Array.from(new Set(elems));\n}\n/**\n * Get the parent of each element in the current set of matched elements,\n * optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').parent().attr('id');\n * //=> fruits\n * ```\n *\n * @param selector - If specified filter for parent.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parent/}\n */\nexports.parent = _singleMatcher(function (_a) {\n    var parent = _a.parent;\n    return (parent && !domhandler_1.isDocument(parent) ? parent : null);\n}, _removeDuplicates);\n/**\n * Get a set of parents filtered by `selector` of each element in the current\n * set of match elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').parents().length;\n * //=> 2\n * $('.orange').parents('#fruits').length;\n * //=> 1\n * ```\n *\n * @param selector - If specified filter for parents.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parents/}\n */\nexports.parents = _matcher(function (elem) {\n    var matched = [];\n    while (elem.parent && !domhandler_1.isDocument(elem.parent)) {\n        matched.push(elem.parent);\n        elem = elem.parent;\n    }\n    return matched;\n}, uniqueSort, function (elems) { return elems.reverse(); });\n/**\n * Get the ancestors of each element in the current set of matched elements, up\n * to but not including the element matched by the selector, DOM node, or cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').parentsUntil('#food').length;\n * //=> 1\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - Optional filter for parents.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parentsUntil/}\n */\nexports.parentsUntil = _matchUntil(function (_a) {\n    var parent = _a.parent;\n    return (parent && !domhandler_1.isDocument(parent) ? parent : null);\n}, uniqueSort, function (elems) { return elems.reverse(); });\n/**\n * For each element in the set, get the first element that matches the selector\n * by testing the element itself and traversing up through its ancestors in the DOM tree.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').closest();\n * //=> []\n *\n * $('.orange').closest('.apple');\n * // => []\n *\n * $('.orange').closest('li');\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * $('.orange').closest('#fruits');\n * //=> [<ul id=\"fruits\"> ... </ul>]\n * ```\n *\n * @param selector - Selector for the element to find.\n * @returns The closest nodes.\n * @see {@link https://api.jquery.com/closest/}\n */\nfunction closest(selector) {\n    var _this = this;\n    var set = [];\n    if (!selector) {\n        return this._make(set);\n    }\n    utils_1.domEach(this, function (elem) {\n        var _a;\n        while (elem && elem.type !== 'root') {\n            if (!selector ||\n                filterArray([elem], selector, _this.options.xmlMode, (_a = _this._root) === null || _a === void 0 ? void 0 : _a[0])\n                    .length) {\n                // Do not add duplicate elements to the set\n                if (elem && !set.includes(elem)) {\n                    set.push(elem);\n                }\n                break;\n            }\n            elem = elem.parent;\n        }\n    });\n    return this._make(set);\n}\nexports.closest = closest;\n/**\n * Gets the next sibling of the first selected element, optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').next().hasClass('orange');\n * //=> true\n * ```\n *\n * @param selector - If specified filter for sibling.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/next/}\n */\nexports.next = _singleMatcher(function (elem) { return htmlparser2_1.DomUtils.nextElementSibling(elem); });\n/**\n * Gets all the following siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').nextAll();\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n * $('.apple').nextAll('.orange');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/nextAll/}\n */\nexports.nextAll = _matcher(function (elem) {\n    var matched = [];\n    while (elem.next) {\n        elem = elem.next;\n        if (utils_1.isTag(elem))\n            matched.push(elem);\n    }\n    return matched;\n}, _removeDuplicates);\n/**\n * Gets all the following siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').nextUntil('.pear');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - If specified filter for siblings.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/nextUntil/}\n */\nexports.nextUntil = _matchUntil(function (el) { return htmlparser2_1.DomUtils.nextElementSibling(el); }, _removeDuplicates);\n/**\n * Gets the previous sibling of the first selected element optionally filtered\n * by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').prev().hasClass('apple');\n * //=> true\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prev/}\n */\nexports.prev = _singleMatcher(function (elem) { return htmlparser2_1.DomUtils.prevElementSibling(elem); });\n/**\n * Gets all the preceding siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').prevAll();\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n *\n * $('.pear').prevAll('.orange');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prevAll/}\n */\nexports.prevAll = _matcher(function (elem) {\n    var matched = [];\n    while (elem.prev) {\n        elem = elem.prev;\n        if (utils_1.isTag(elem))\n            matched.push(elem);\n    }\n    return matched;\n}, _removeDuplicates);\n/**\n * Gets all the preceding siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').prevUntil('.apple');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prevUntil/}\n */\nexports.prevUntil = _matchUntil(function (el) { return htmlparser2_1.DomUtils.prevElementSibling(el); }, _removeDuplicates);\n/**\n * Get the siblings of each element (excluding the element) in the set of\n * matched elements, optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').siblings().length;\n * //=> 2\n *\n * $('.pear').siblings('.orange').length;\n * //=> 1\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The siblings.\n * @see {@link https://api.jquery.com/siblings/}\n */\nexports.siblings = _matcher(function (elem) {\n    return htmlparser2_1.DomUtils.getSiblings(elem).filter(function (el) { return utils_1.isTag(el) && el !== elem; });\n}, uniqueSort);\n/**\n * Gets the children of the first selected element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().length;\n * //=> 3\n *\n * $('#fruits').children('.pear').text();\n * //=> Pear\n * ```\n *\n * @param selector - If specified filter for children.\n * @returns The children.\n * @see {@link https://api.jquery.com/children/}\n */\nexports.children = _matcher(function (elem) { return htmlparser2_1.DomUtils.getChildren(elem).filter(utils_1.isTag); }, _removeDuplicates);\n/**\n * Gets the children of each element in the set of matched elements, including\n * text and comment nodes.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').contents().length;\n * //=> 3\n * ```\n *\n * @returns The children.\n * @see {@link https://api.jquery.com/contents/}\n */\nfunction contents() {\n    var elems = this.toArray().reduce(function (newElems, elem) {\n        return domhandler_1.hasChildren(elem) ? newElems.concat(elem.children) : newElems;\n    }, []);\n    return this._make(elems);\n}\nexports.contents = contents;\n/**\n * Iterates over a cheerio object, executing a function for each matched\n * element. When the callback is fired, the function is fired in the context of\n * the DOM element, so `this` refers to the current element, which is equivalent\n * to the function parameter `element`. To break out of the `each` loop early,\n * return with `false`.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * const fruits = [];\n *\n * $('li').each(function (i, elem) {\n *   fruits[i] = $(this).text();\n * });\n *\n * fruits.join(', ');\n * //=> Apple, Orange, Pear\n * ```\n *\n * @param fn - Function to execute.\n * @returns The instance itself, useful for chaining.\n * @see {@link https://api.jquery.com/each/}\n */\nfunction each(fn) {\n    var i = 0;\n    var len = this.length;\n    while (i < len && fn.call(this[i], i, this[i]) !== false)\n        ++i;\n    return this;\n}\nexports.each = each;\n/**\n * Pass each element in the current matched set through a function, producing a\n * new Cheerio object containing the return values. The function can return an\n * individual data item or an array of data items to be inserted into the\n * resulting set. If an array is returned, the elements inside the array are\n * inserted into the set. If the function returns null or undefined, no element\n * will be inserted.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li')\n *   .map(function (i, el) {\n *     // this === el\n *     return $(this).text();\n *   })\n *   .toArray()\n *   .join(' ');\n * //=> \"apple orange pear\"\n * ```\n *\n * @param fn - Function to execute.\n * @returns The mapped elements, wrapped in a Cheerio collection.\n * @see {@link https://api.jquery.com/map/}\n */\nfunction map(fn) {\n    var elems = [];\n    for (var i = 0; i < this.length; i++) {\n        var el = this[i];\n        var val = fn.call(el, i, el);\n        if (val != null) {\n            elems = elems.concat(val);\n        }\n    }\n    return this._make(elems);\n}\nexports.map = map;\n/**\n * Creates a function to test if a filter is matched.\n *\n * @param match - A filter.\n * @returns A function that determines if a filter has been matched.\n */\nfunction getFilterFn(match) {\n    if (typeof match === 'function') {\n        return function (el, i) { return match.call(el, i, el); };\n    }\n    if (utils_1.isCheerio(match)) {\n        return function (el) { return Array.prototype.includes.call(match, el); };\n    }\n    return function (el) {\n        return match === el;\n    };\n}\nfunction filter(match) {\n    var _a;\n    return this._make(filterArray(this.toArray(), match, this.options.xmlMode, (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]));\n}\nexports.filter = filter;\nfunction filterArray(nodes, match, xmlMode, root) {\n    return typeof match === 'string'\n        ? select.filter(match, nodes, { xmlMode: xmlMode, root: root })\n        : nodes.filter(getFilterFn(match));\n}\nexports.filterArray = filterArray;\n/**\n * Checks the current list of elements and returns `true` if *any* of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if *any* of the elements match. If using a predicate function,\n * the function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @category Attributes\n * @param selector - Selector for the selection.\n * @returns Whether or not the selector matches an element of the instance.\n * @see {@link https://api.jquery.com/is/}\n */\nfunction is(selector) {\n    var nodes = this.toArray();\n    return typeof selector === 'string'\n        ? select.some(nodes.filter(utils_1.isTag), selector, this.options)\n        : selector\n            ? nodes.some(getFilterFn(selector))\n            : false;\n}\nexports.is = is;\n/**\n * Remove elements from the set of matched elements. Given a Cheerio object that\n * represents a set of DOM elements, the `.not()` method constructs a new\n * Cheerio object from a subset of the matching elements. The supplied selector\n * is tested against each element; the elements that don't match the selector\n * will be included in the result.\n *\n * The `.not()` method can take a function as its argument in the same way that\n * `.filter()` does. Elements for which the function returns `true` are excluded\n * from the filtered set; all other elements are included.\n *\n * @category Traversing\n * @example <caption>Selector</caption>\n *\n * ```js\n * $('li').not('.apple').length;\n * //=> 2\n * ```\n *\n * @example <caption>Function</caption>\n *\n * ```js\n * $('li').not(function (i, el) {\n *   // this === el\n *   return $(this).attr('class') === 'orange';\n * }).length; //=> 2\n * ```\n *\n * @param match - Value to look for, following the rules above.\n * @param container - Optional node to filter instead.\n * @returns The filtered collection.\n * @see {@link https://api.jquery.com/not/}\n */\nfunction not(match) {\n    var nodes = this.toArray();\n    if (typeof match === 'string') {\n        var matches_1 = new Set(select.filter(match, nodes, this.options));\n        nodes = nodes.filter(function (el) { return !matches_1.has(el); });\n    }\n    else {\n        var filterFn_1 = getFilterFn(match);\n        nodes = nodes.filter(function (el, i) { return !filterFn_1(el, i); });\n    }\n    return this._make(nodes);\n}\nexports.not = not;\n/**\n * Filters the set of matched elements to only those which have the given DOM\n * element as a descendant or which have a descendant that matches the given\n * selector. Equivalent to `.filter(':has(selector)')`.\n *\n * @category Traversing\n * @example <caption>Selector</caption>\n *\n * ```js\n * $('ul').has('.pear').attr('id');\n * //=> fruits\n * ```\n *\n * @example <caption>Element</caption>\n *\n * ```js\n * $('ul').has($('.pear')[0]).attr('id');\n * //=> fruits\n * ```\n *\n * @param selectorOrHaystack - Element to look for.\n * @returns The filtered collection.\n * @see {@link https://api.jquery.com/has/}\n */\nfunction has(selectorOrHaystack) {\n    var _this = this;\n    return this.filter(typeof selectorOrHaystack === 'string'\n        ? // Using the `:has` selector here short-circuits searches.\n            \":has(\" + selectorOrHaystack + \")\"\n        : function (_, el) { return _this._make(el).find(selectorOrHaystack).length > 0; });\n}\nexports.has = has;\n/**\n * Will select the first element of a cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().first().text();\n * //=> Apple\n * ```\n *\n * @returns The first element.\n * @see {@link https://api.jquery.com/first/}\n */\nfunction first() {\n    return this.length > 1 ? this._make(this[0]) : this;\n}\nexports.first = first;\n/**\n * Will select the last element of a cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().last().text();\n * //=> Pear\n * ```\n *\n * @returns The last element.\n * @see {@link https://api.jquery.com/last/}\n */\nfunction last() {\n    return this.length > 0 ? this._make(this[this.length - 1]) : this;\n}\nexports.last = last;\n/**\n * Reduce the set of matched elements to the one at the specified index. Use\n * `.eq(-i)` to count backwards from the last selected element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).text();\n * //=> Apple\n *\n * $('li').eq(-1).text();\n * //=> Pear\n * ```\n *\n * @param i - Index of the element to select.\n * @returns The element at the `i`th position.\n * @see {@link https://api.jquery.com/eq/}\n */\nfunction eq(i) {\n    var _a;\n    i = +i;\n    // Use the first identity optimization if possible\n    if (i === 0 && this.length <= 1)\n        return this;\n    if (i < 0)\n        i = this.length + i;\n    return this._make((_a = this[i]) !== null && _a !== void 0 ? _a : []);\n}\nexports.eq = eq;\nfunction get(i) {\n    if (i == null) {\n        return this.toArray();\n    }\n    return this[i < 0 ? this.length + i : i];\n}\nexports.get = get;\n/**\n * Retrieve all the DOM elements contained in the jQuery set as an array.\n *\n * @example\n *\n * ```js\n * $('li').toArray();\n * //=> [ {...}, {...}, {...} ]\n * ```\n *\n * @returns The contained items.\n */\nfunction toArray() {\n    return Array.prototype.slice.call(this);\n}\nexports.toArray = toArray;\n/**\n * Search for a given element from among the matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').index();\n * //=> 2 $('.orange').index('li');\n * //=> 1\n * $('.apple').index($('#fruit, li'));\n * //=> 1\n * ```\n *\n * @param selectorOrNeedle - Element to look for.\n * @returns The index of the element.\n * @see {@link https://api.jquery.com/index/}\n */\nfunction index(selectorOrNeedle) {\n    var $haystack;\n    var needle;\n    if (selectorOrNeedle == null) {\n        $haystack = this.parent().children();\n        needle = this[0];\n    }\n    else if (typeof selectorOrNeedle === 'string') {\n        $haystack = this._make(selectorOrNeedle);\n        needle = this[0];\n    }\n    else {\n        $haystack = this;\n        needle = utils_1.isCheerio(selectorOrNeedle)\n            ? selectorOrNeedle[0]\n            : selectorOrNeedle;\n    }\n    return Array.prototype.indexOf.call($haystack, needle);\n}\nexports.index = index;\n/**\n * Gets the elements matching the specified range (0-based position).\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').slice(1).eq(0).text();\n * //=> 'Orange'\n *\n * $('li').slice(1, 2).length;\n * //=> 1\n * ```\n *\n * @param start - An position at which the elements begin to be selected. If\n *   negative, it indicates an offset from the end of the set.\n * @param end - An position at which the elements stop being selected. If\n *   negative, it indicates an offset from the end of the set. If omitted, the\n *   range continues until the end of the set.\n * @returns The elements matching the specified range.\n * @see {@link https://api.jquery.com/slice/}\n */\nfunction slice(start, end) {\n    return this._make(Array.prototype.slice.call(this, start, end));\n}\nexports.slice = slice;\n/**\n * End the most recent filtering operation in the current chain and return the\n * set of matched elements to its previous state.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).end().length;\n * //=> 3\n * ```\n *\n * @returns The previous state of the set of matched elements.\n * @see {@link https://api.jquery.com/end/}\n */\nfunction end() {\n    var _a;\n    return (_a = this.prevObject) !== null && _a !== void 0 ? _a : this._make([]);\n}\nexports.end = end;\n/**\n * Add elements to the set of matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').add('.orange').length;\n * //=> 2\n * ```\n *\n * @param other - Elements to add.\n * @param context - Optionally the context of the new selection.\n * @returns The combined set.\n * @see {@link https://api.jquery.com/add/}\n */\nfunction add(other, context) {\n    var selection = this._make(other, context);\n    var contents = uniqueSort(tslib_1.__spreadArray(tslib_1.__spreadArray([], this.get()), selection.get()));\n    return this._make(contents);\n}\nexports.add = add;\n/**\n * Add the previous set of elements on the stack to the current set, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).addBack('.orange').length;\n * //=> 2\n * ```\n *\n * @param selector - Selector for the elements to add.\n * @returns The combined set.\n * @see {@link https://api.jquery.com/addBack/}\n */\nfunction addBack(selector) {\n    return this.prevObject\n        ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject)\n        : this;\n}\nexports.addBack = addBack;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clone = exports.text = exports.toString = exports.html = exports.empty = exports.replaceWith = exports.remove = exports.insertBefore = exports.before = exports.insertAfter = exports.after = exports.wrapAll = exports.unwrap = exports.wrapInner = exports.wrap = exports.prepend = exports.append = exports.prependTo = exports.appendTo = exports._makeDomArray = void 0;\nvar tslib_1 = require(\"tslib\");\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nvar domhandler_2 = require(\"domhandler\");\nvar parse_1 = tslib_1.__importStar(require(\"../parse\"));\nvar static_1 = require(\"../static\");\nvar utils_1 = require(\"../utils\");\nvar htmlparser2_1 = require(\"htmlparser2\");\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nfunction _makeDomArray(elem, clone) {\n    var _this = this;\n    if (elem == null) {\n        return [];\n    }\n    if (utils_1.isCheerio(elem)) {\n        return clone ? utils_1.cloneDom(elem.get()) : elem.get();\n    }\n    if (Array.isArray(elem)) {\n        return elem.reduce(function (newElems, el) { return newElems.concat(_this._makeDomArray(el, clone)); }, []);\n    }\n    if (typeof elem === 'string') {\n        return parse_1.default(elem, this.options, false).children;\n    }\n    return clone ? utils_1.cloneDom([elem]) : [elem];\n}\nexports._makeDomArray = _makeDomArray;\nfunction _insert(concatenator) {\n    return function () {\n        var _this = this;\n        var elems = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            elems[_i] = arguments[_i];\n        }\n        var lastIdx = this.length - 1;\n        return utils_1.domEach(this, function (el, i) {\n            if (!domhandler_1.hasChildren(el))\n                return;\n            var domSrc = typeof elems[0] === 'function'\n                ? elems[0].call(el, i, static_1.html(el.children))\n                : elems;\n            var dom = _this._makeDomArray(domSrc, i < lastIdx);\n            concatenator(dom, el.children, el);\n        });\n    };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n    var _a, _b;\n    var spliceArgs = tslib_1.__spreadArray([\n        spliceIdx,\n        spliceCount\n    ], newElems);\n    var prev = array[spliceIdx - 1] || null;\n    var next = array[spliceIdx + spliceCount] || null;\n    /*\n     * Before splicing in new elements, ensure they do not already appear in the\n     * current array.\n     */\n    for (var idx = 0; idx < newElems.length; ++idx) {\n        var node = newElems[idx];\n        var oldParent = node.parent;\n        if (oldParent) {\n            var prevIdx = oldParent.children.indexOf(newElems[idx]);\n            if (prevIdx > -1) {\n                oldParent.children.splice(prevIdx, 1);\n                if (parent === oldParent && spliceIdx > prevIdx) {\n                    spliceArgs[0]--;\n                }\n            }\n        }\n        node.parent = parent;\n        if (node.prev) {\n            node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n        }\n        if (node.next) {\n            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n        }\n        node.prev = newElems[idx - 1] || prev;\n        node.next = newElems[idx + 1] || next;\n    }\n    if (prev) {\n        prev.next = newElems[0];\n    }\n    if (next) {\n        next.prev = newElems[newElems.length - 1];\n    }\n    return array.splice.apply(array, spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nfunction appendTo(target) {\n    var appendTarget = utils_1.isCheerio(target) ? target : this._make(target);\n    appendTarget.append(this);\n    return this;\n}\nexports.appendTo = appendTo;\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nfunction prependTo(target) {\n    var prependTarget = utils_1.isCheerio(target) ? target : this._make(target);\n    prependTarget.prepend(this);\n    return this;\n}\nexports.prependTo = prependTo;\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexports.append = _insert(function (dom, children, parent) {\n    uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexports.prepend = _insert(function (dom, children, parent) {\n    uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n    return function (wrapper) {\n        var lastIdx = this.length - 1;\n        var lastParent = this.parents().last();\n        for (var i = 0; i < this.length; i++) {\n            var el = this[i];\n            var wrap_1 = typeof wrapper === 'function'\n                ? wrapper.call(el, i, el)\n                : typeof wrapper === 'string' && !utils_1.isHtml(wrapper)\n                    ? lastParent.find(wrapper).clone()\n                    : wrapper;\n            var wrapperDom = this._makeDomArray(wrap_1, i < lastIdx)[0];\n            if (!wrapperDom || !htmlparser2_1.DomUtils.hasChildren(wrapperDom))\n                continue;\n            var elInsertLocation = wrapperDom;\n            /*\n             * Find the deepest child. Only consider the first tag child of each node\n             * (ignore text); stop if no children are found.\n             */\n            var j = 0;\n            while (j < elInsertLocation.children.length) {\n                var child = elInsertLocation.children[j];\n                if (utils_1.isTag(child)) {\n                    elInsertLocation = child;\n                    j = 0;\n                }\n                else {\n                    j++;\n                }\n            }\n            insert(el, elInsertLocation, [wrapperDom]);\n        }\n        return this;\n    };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n    var parent = el.parent;\n    if (!parent)\n        return;\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    parse_1.update([el], elInsertLocation);\n    /*\n     * The previous operation removed the current element from the `siblings`\n     * array, so the `dom` array can be inserted without removing any\n     * additional elements.\n     */\n    uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n    if (!domhandler_1.hasChildren(el))\n        return;\n    parse_1.update(el.children, elInsertLocation);\n    parse_1.update(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nfunction unwrap(selector) {\n    var _this = this;\n    this.parent(selector)\n        .not('body')\n        .each(function (_, el) {\n        _this._make(el).replaceWith(el.children);\n    });\n    return this;\n}\nexports.unwrap = unwrap;\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nfunction wrapAll(wrapper) {\n    var el = this[0];\n    if (el) {\n        var wrap_2 = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n        // If html is given as wrapper, wrap may contain text elements\n        var elInsertLocation = void 0;\n        for (var i = 0; i < wrap_2.length; i++) {\n            if (wrap_2[i].type === 'tag')\n                elInsertLocation = wrap_2[i];\n        }\n        var j = 0;\n        /*\n         * Find the deepest child. Only consider the first tag child of each node\n         * (ignore text); stop if no children are found.\n         */\n        while (elInsertLocation && j < elInsertLocation.children.length) {\n            var child = elInsertLocation.children[j];\n            if (child.type === 'tag') {\n                elInsertLocation = child;\n                j = 0;\n            }\n            else {\n                j++;\n            }\n        }\n        if (elInsertLocation)\n            this._make(elInsertLocation).append(this);\n    }\n    return this;\n}\nexports.wrapAll = wrapAll;\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nfunction after() {\n    var _this = this;\n    var elems = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return utils_1.domEach(this, function (el, i) {\n        var parent = el.parent;\n        if (!htmlparser2_1.DomUtils.hasChildren(el) || !parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        var domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, static_1.html(el.children))\n            : elems;\n        var dom = _this._makeDomArray(domSrc, i < lastIdx);\n        // Add element after `this` element\n        uniqueSplice(siblings, index + 1, 0, dom, parent);\n    });\n}\nexports.after = after;\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nfunction insertAfter(target) {\n    var _this = this;\n    if (typeof target === 'string') {\n        target = this._make(target);\n    }\n    this.remove();\n    var clones = [];\n    this._makeDomArray(target).forEach(function (el) {\n        var clonedSelf = _this.clone().toArray();\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n        clones.push.apply(clones, clonedSelf);\n    });\n    return this._make(clones);\n}\nexports.insertAfter = insertAfter;\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nfunction before() {\n    var _this = this;\n    var elems = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return utils_1.domEach(this, function (el, i) {\n        var parent = el.parent;\n        if (!htmlparser2_1.DomUtils.hasChildren(el) || !parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        var domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, static_1.html(el.children))\n            : elems;\n        var dom = _this._makeDomArray(domSrc, i < lastIdx);\n        // Add element before `el` element\n        uniqueSplice(siblings, index, 0, dom, parent);\n    });\n}\nexports.before = before;\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nfunction insertBefore(target) {\n    var _this = this;\n    var targetArr = this._make(target);\n    this.remove();\n    var clones = [];\n    utils_1.domEach(targetArr, function (el) {\n        var clonedSelf = _this.clone().toArray();\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index, 0, clonedSelf, parent);\n        clones.push.apply(clones, clonedSelf);\n    });\n    return this._make(clones);\n}\nexports.insertBefore = insertBefore;\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nfunction remove(selector) {\n    // Filter if we have selector\n    var elems = selector ? this.filter(selector) : this;\n    utils_1.domEach(elems, function (el) {\n        htmlparser2_1.DomUtils.removeElement(el);\n        el.prev = el.next = el.parent = null;\n    });\n    return this;\n}\nexports.remove = remove;\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nfunction replaceWith(content) {\n    var _this = this;\n    return utils_1.domEach(this, function (el, i) {\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var cont = typeof content === 'function' ? content.call(el, i, el) : content;\n        var dom = _this._makeDomArray(cont);\n        /*\n         * In the case that `dom` contains nodes that already exist in other\n         * structures, ensure those nodes are properly removed.\n         */\n        parse_1.update(dom, null);\n        var index = siblings.indexOf(el);\n        // Completely remove old element\n        uniqueSplice(siblings, index, 1, dom, parent);\n        if (!dom.includes(el)) {\n            el.parent = el.prev = el.next = null;\n        }\n    });\n}\nexports.replaceWith = replaceWith;\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nfunction empty() {\n    return utils_1.domEach(this, function (el) {\n        if (!htmlparser2_1.DomUtils.hasChildren(el))\n            return;\n        el.children.forEach(function (child) {\n            child.next = child.prev = child.parent = null;\n        });\n        el.children.length = 0;\n    });\n}\nexports.empty = empty;\nfunction html(str) {\n    if (str === undefined) {\n        var el = this[0];\n        if (!el || !htmlparser2_1.DomUtils.hasChildren(el))\n            return null;\n        return static_1.html(el.children, this.options);\n    }\n    // Keep main options unchanged\n    var opts = tslib_1.__assign(tslib_1.__assign({}, this.options), { context: null });\n    return utils_1.domEach(this, function (el) {\n        if (!htmlparser2_1.DomUtils.hasChildren(el))\n            return;\n        el.children.forEach(function (child) {\n            child.next = child.prev = child.parent = null;\n        });\n        opts.context = el;\n        var content = utils_1.isCheerio(str)\n            ? str.toArray()\n            : parse_1.default(\"\" + str, opts, false).children;\n        parse_1.update(content, el);\n    });\n}\nexports.html = html;\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nfunction toString() {\n    return static_1.html(this, this.options);\n}\nexports.toString = toString;\nfunction text(str) {\n    var _this = this;\n    // If `str` is undefined, act as a \"getter\"\n    if (str === undefined) {\n        return static_1.text(this);\n    }\n    if (typeof str === 'function') {\n        // Function support\n        return utils_1.domEach(this, function (el, i) {\n            text.call(_this._make(el), str.call(el, i, static_1.text([el])));\n        });\n    }\n    // Append text node to each selected elements\n    return utils_1.domEach(this, function (el) {\n        if (!htmlparser2_1.DomUtils.hasChildren(el))\n            return;\n        el.children.forEach(function (child) {\n            child.next = child.prev = child.parent = null;\n        });\n        var textNode = new domhandler_2.Text(str);\n        parse_1.update(textNode, el);\n    });\n}\nexports.text = text;\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nfunction clone() {\n    return this._make(utils_1.cloneDom(this.get()));\n}\nexports.clone = clone;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.css = void 0;\nvar utils_1 = require(\"../utils\");\nfunction css(prop, val) {\n    if ((prop != null && val != null) ||\n        // When `prop` is a \"plain\" object\n        (typeof prop === 'object' && !Array.isArray(prop))) {\n        return utils_1.domEach(this, function (el, i) {\n            if (utils_1.isTag(el)) {\n                // `prop` can't be an array here anymore.\n                setCss(el, prop, val, i);\n            }\n        });\n    }\n    return getCss(this[0], prop);\n}\nexports.css = css;\n/**\n * Set styles of all elements.\n *\n * @private\n * @param el - Element to set style of.\n * @param prop - Name of property.\n * @param value - Value to set property to.\n * @param idx - Optional index within the selection.\n */\nfunction setCss(el, prop, value, idx) {\n    if (typeof prop === 'string') {\n        var styles = getCss(el);\n        var val = typeof value === 'function' ? value.call(el, idx, styles[prop]) : value;\n        if (val === '') {\n            delete styles[prop];\n        }\n        else if (val != null) {\n            styles[prop] = val;\n        }\n        el.attribs.style = stringify(styles);\n    }\n    else if (typeof prop === 'object') {\n        Object.keys(prop).forEach(function (k, i) {\n            setCss(el, k, prop[k], i);\n        });\n    }\n}\nfunction getCss(el, prop) {\n    if (!el || !utils_1.isTag(el))\n        return;\n    var styles = parse(el.attribs.style);\n    if (typeof prop === 'string') {\n        return styles[prop];\n    }\n    if (Array.isArray(prop)) {\n        var newStyles_1 = {};\n        prop.forEach(function (item) {\n            if (styles[item] != null) {\n                newStyles_1[item] = styles[item];\n            }\n        });\n        return newStyles_1;\n    }\n    return styles;\n}\n/**\n * Stringify `obj` to styles.\n *\n * @private\n * @category CSS\n * @param obj - Object to stringify.\n * @returns The serialized styles.\n */\nfunction stringify(obj) {\n    return Object.keys(obj).reduce(function (str, prop) { return \"\" + str + (str ? ' ' : '') + prop + \": \" + obj[prop] + \";\"; }, '');\n}\n/**\n * Parse `styles`.\n *\n * @private\n * @category CSS\n * @param styles - Styles to be parsed.\n * @returns The parsed styles.\n */\nfunction parse(styles) {\n    styles = (styles || '').trim();\n    if (!styles)\n        return {};\n    return styles.split(';').reduce(function (obj, str) {\n        var n = str.indexOf(':');\n        // Skip if there is no :, or if it is the first/last character\n        if (n < 1 || n === str.length - 1)\n            return obj;\n        obj[str.slice(0, n).trim()] = str.slice(n + 1).trim();\n        return obj;\n    }, {});\n}\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeArray = exports.serialize = void 0;\nvar utils_1 = require(\"../utils\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\nfunction serialize() {\n    // Convert form elements into name/value objects\n    var arr = this.serializeArray();\n    // Serialize each element into a key/value string\n    var retArr = arr.map(function (data) {\n        return encodeURIComponent(data.name) + \"=\" + encodeURIComponent(data.value);\n    });\n    // Return the resulting serialization\n    return retArr.join('&').replace(r20, '+');\n}\nexports.serialize = serialize;\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\nfunction serializeArray() {\n    var _this = this;\n    // Resolve all form elements from either forms or collections of form elements\n    return this.map(function (_, elem) {\n        var $elem = _this._make(elem);\n        if (utils_1.isTag(elem) && elem.name === 'form') {\n            return $elem.find(submittableSelector).toArray();\n        }\n        return $elem.filter(submittableSelector).toArray();\n    })\n        .filter(\n    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n    '[name!=\"\"]:enabled' +\n        // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // And are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    )\n        .map(function (_, elem) {\n        var _a;\n        var $elem = _this._make(elem);\n        var name = $elem.attr('name'); // We have filtered for elements with a name before.\n        // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n        var value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : '';\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                /*\n                 * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n                 * These can occur inside of `<textarea>'s`\n                 */\n                return ({ name: name, value: val.replace(rCRLF, '\\r\\n') });\n            });\n        }\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        return { name: name, value: value.replace(rCRLF, '\\r\\n') };\n    })\n        .toArray();\n}\nexports.serializeArray = serializeArray;\n"]}