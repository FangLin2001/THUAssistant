{"version":3,"sources":["index.js","types.js","types/bmp.js","types/cur.js","types/ico.js","types/dds.js","types/gif.js","types/icns.js","types/j2c.js","types/jp2.js","types/jpg.js","readUInt.js","types/ktx.js","types/png.js","types/pnm.js","types/psd.js","types/svg.js","types/tiff.js","types/webp.js","detector.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,AENA,ADGA;AJaA,ACHA,ACHA,ACHA,AENA,ADGA;AJaA,ACHA,ACHA,ACHA,AENA,ADGA;AJaA,ACHA,ACHA,ACHA,AENA,ACHA,AFMA;AJaA,ACHA,ACHA,ACHA,AENA,ACHA,AFMA;AJaA,ACHA,ACHA,ACHA,AENA,ACHA,AFMA;AJaA,ACHA,AENA,AENA,ACHA,ACHA,AHSA;AJaA,ACHA,AENA,AENA,ACHA,ACHA,AHSA;AJaA,ACHA,AENA,AENA,ACHA,ACHA,AHSA;AJaA,ACHA,AENA,AENA,ACHA,ACHA,AHSA,AIZA;ARyBA,ACHA,AENA,AENA,ACHA,ACHA,AHSA,AIZA;ARyBA,ACHA,AIZA,ACHA,ACHA,AHSA,AIZA;ARyBA,ACHA,AIZA,ACHA,ACHA,AHSA,AIZA,ACHA;AT4BA,ACHA,AIZA,ACHA,ACHA,AHSA,AIZA,ACHA;AT4BA,ACHA,AIZA,ACHA,ACHA,AHSA,AIZA,ACHA;AT4BA,ACHA,AKfA,ACHA,AHSA,AIZA,ACHA,ACHA;AV+BA,ACHA,AKfA,ACHA,AHSA,AIZA,ACHA,ACHA;AV+BA,ACHA,AKfA,ACHA,AHSA,AIZA,ACHA,ACHA;AV+BA,AWjCA,AV8BA,AKfA,ACHA,AHSA,AIZA,ACHA,ACHA;AV+BA,AWjCA,AV8BA,AKfA,ACHA,AHSA,AIZA,ACHA,ACHA;AV+BA,AWjCA,AV8BA,AMlBA,AHSA,AIZA,ACHA,ACHA;AV+BA,AWjCA,AV8BA,AMlBA,AHSA,AIZA,ACHA,ACHA,AENA;AZqCA,AWjCA,AV8BA,AMlBA,AHSA,AIZA,ACHA,ACHA,AENA;AZqCA,AWjCA,AV8BA,AMlBA,AHSA,AIZA,ACHA,ACHA,AENA;AZqCA,AWjCA,AV8BA,AMlBA,AHSA,AIZA,ACHA,ACHA,AENA,ACHA;AbwCA,AWjCA,AV8BA,AMlBA,AHSA,AKfA,ACHA,AENA,ACHA;AbwCA,AWjCA,AV8BA,AMlBA,AHSA,AKfA,ACHA,AENA,ACHA;AbwCA,AWjCA,AJYA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA;Ad2CA,AWjCA,AJYA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA;Ad2CA,AWjCA,AJYA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA;Ad2CA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA;Af8CA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA;Af8CA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA;Af8CA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA;AhBiDA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA;AhBiDA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA;AhBiDA,AOrBA,AHSA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA;AjBoDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA;AjBoDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA;AjBoDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA;AlBuDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA;AlBuDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AGTA,ACHA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AHSA,AKfA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AENA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AENA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AENA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AENA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AENA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AENA,ACHA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;ACFA,AnByDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA,ACHA;AlBuDA,AOrBA,AGTA,AIZA,AENA,ACHA;AjBoDA,AOrBA,AGTA,AIZA,AENA,ACHA;AjBoDA,AOrBA,AGTA,AIZA,AENA,ACHA;AjBoDA,AOrBA,AGTA,AIZA,AENA,ACHA;AjBoDA,AOrBA,AGTA,AIZA,AENA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AOrBA,AGTA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;AjBoDA,AU9BA,AMlBA,ACHA;APsBA,AMlBA,ACHA;APsBA,AMlBA,ACHA;APsBA,AMlBA,ACHA;APsBA,AMlBA,ACHA;APsBA,AMlBA,ACHA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.types = exports.setConcurrency = exports.disableTypes = exports.disableFS = exports.imageSize = void 0;\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst queue_1 = require(\"queue\");\nconst types_1 = require(\"./types\");\nconst detector_1 = require(\"./detector\");\n// Maximum buffer size, with a default of 512 kilobytes.\n// TO-DO: make this adaptive based on the initial signature of the image\nconst MaxBufferSize = 512 * 1024;\n// This queue is for async `fs` operations, to avoid reaching file-descriptor limits\nconst queue = new queue_1.default({ concurrency: 100, autostart: true });\nconst globalOptions = {\n    disabledFS: false,\n    disabledTypes: []\n};\n/**\n * Return size information based on a buffer\n *\n * @param {Buffer} buffer\n * @param {String} filepath\n * @returns {Object}\n */\nfunction lookup(buffer, filepath) {\n    // detect the file type.. don't rely on the extension\n    const type = (0, detector_1.detector)(buffer);\n    if (typeof type !== 'undefined') {\n        if (globalOptions.disabledTypes.indexOf(type) > -1) {\n            throw new TypeError('disabled file type: ' + type);\n        }\n        // find an appropriate handler for this file type\n        if (type in types_1.typeHandlers) {\n            const size = types_1.typeHandlers[type].calculate(buffer, filepath);\n            if (size !== undefined) {\n                size.type = type;\n                return size;\n            }\n        }\n    }\n    // throw up, if we don't understand the file\n    throw new TypeError('unsupported file type: ' + type + ' (file: ' + filepath + ')');\n}\n/**\n * Reads a file into a buffer.\n * @param {String} filepath\n * @returns {Promise<Buffer>}\n */\nfunction asyncFileToBuffer(filepath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const handle = yield fs.promises.open(filepath, 'r');\n        try {\n            const { size } = yield handle.stat();\n            if (size <= 0) {\n                throw new Error('Empty file');\n            }\n            const bufferSize = Math.min(size, MaxBufferSize);\n            const buffer = Buffer.alloc(bufferSize);\n            yield handle.read(buffer, 0, bufferSize, 0);\n            return buffer;\n        }\n        finally {\n            yield handle.close();\n        }\n    });\n}\n/**\n * Synchronously reads a file into a buffer, blocking the nodejs process.\n *\n * @param {String} filepath\n * @returns {Buffer}\n */\nfunction syncFileToBuffer(filepath) {\n    // read from the file, synchronously\n    const descriptor = fs.openSync(filepath, 'r');\n    try {\n        const { size } = fs.fstatSync(descriptor);\n        if (size <= 0) {\n            throw new Error('Empty file');\n        }\n        const bufferSize = Math.min(size, MaxBufferSize);\n        const buffer = Buffer.alloc(bufferSize);\n        fs.readSync(descriptor, buffer, 0, bufferSize, 0);\n        return buffer;\n    }\n    finally {\n        fs.closeSync(descriptor);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nmodule.exports = exports = imageSize; // backwards compatibility\nexports.default = imageSize;\n/**\n * @param {Buffer|string} input - buffer or relative/absolute path of the image file\n * @param {Function=} [callback] - optional function for async detection\n */\nfunction imageSize(input, callback) {\n    // Handle buffer input\n    if (Buffer.isBuffer(input)) {\n        return lookup(input);\n    }\n    // input should be a string at this point\n    if (typeof input !== 'string' || globalOptions.disabledFS) {\n        throw new TypeError('invalid invocation. input should be a Buffer');\n    }\n    // resolve the file path\n    const filepath = path.resolve(input);\n    if (typeof callback === 'function') {\n        queue.push(() => asyncFileToBuffer(filepath)\n            .then((buffer) => process.nextTick(callback, null, lookup(buffer, filepath)))\n            .catch(callback));\n    }\n    else {\n        const buffer = syncFileToBuffer(filepath);\n        return lookup(buffer, filepath);\n    }\n}\nexports.imageSize = imageSize;\nconst disableFS = (v) => { globalOptions.disabledFS = v; };\nexports.disableFS = disableFS;\nconst disableTypes = (types) => { globalOptions.disabledTypes = types; };\nexports.disableTypes = disableTypes;\nconst setConcurrency = (c) => { queue.concurrency = c; };\nexports.setConcurrency = setConcurrency;\nexports.types = Object.keys(types_1.typeHandlers);\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeHandlers = void 0;\n// load all available handlers explicitely for browserify support\nconst bmp_1 = require(\"./types/bmp\");\nconst cur_1 = require(\"./types/cur\");\nconst dds_1 = require(\"./types/dds\");\nconst gif_1 = require(\"./types/gif\");\nconst icns_1 = require(\"./types/icns\");\nconst ico_1 = require(\"./types/ico\");\nconst j2c_1 = require(\"./types/j2c\");\nconst jp2_1 = require(\"./types/jp2\");\nconst jpg_1 = require(\"./types/jpg\");\nconst ktx_1 = require(\"./types/ktx\");\nconst png_1 = require(\"./types/png\");\nconst pnm_1 = require(\"./types/pnm\");\nconst psd_1 = require(\"./types/psd\");\nconst svg_1 = require(\"./types/svg\");\nconst tiff_1 = require(\"./types/tiff\");\nconst webp_1 = require(\"./types/webp\");\nexports.typeHandlers = {\n    bmp: bmp_1.BMP,\n    cur: cur_1.CUR,\n    dds: dds_1.DDS,\n    gif: gif_1.GIF,\n    icns: icns_1.ICNS,\n    ico: ico_1.ICO,\n    j2c: j2c_1.J2C,\n    jp2: jp2_1.JP2,\n    jpg: jpg_1.JPG,\n    ktx: ktx_1.KTX,\n    png: png_1.PNG,\n    pnm: pnm_1.PNM,\n    psd: psd_1.PSD,\n    svg: svg_1.SVG,\n    tiff: tiff_1.TIFF,\n    webp: webp_1.WEBP,\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BMP = void 0;\nexports.BMP = {\n    validate(buffer) {\n        return ('BM' === buffer.toString('ascii', 0, 2));\n    },\n    calculate(buffer) {\n        return {\n            height: Math.abs(buffer.readInt32LE(22)),\n            width: buffer.readUInt32LE(18)\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CUR = void 0;\nconst ico_1 = require(\"./ico\");\nconst TYPE_CURSOR = 2;\nexports.CUR = {\n    validate(buffer) {\n        if (buffer.readUInt16LE(0) !== 0) {\n            return false;\n        }\n        return buffer.readUInt16LE(2) === TYPE_CURSOR;\n    },\n    calculate(buffer) {\n        return ico_1.ICO.calculate(buffer);\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ICO = void 0;\nconst TYPE_ICON = 1;\n/**\n * ICON Header\n *\n * | Offset | Size | Purpose |\n * | 0\t    | 2    | Reserved. Must always be 0.  |\n * | 2      | 2    | Image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image. Other values are invalid. |\n * | 4      | 2    | Number of images in the file. |\n *\n */\nconst SIZE_HEADER = 2 + 2 + 2; // 6\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose |\n * | 0\t    | 1    | Image width in pixels. Can be any number between 0 and 255. Value 0 means width is 256 pixels. |\n * | 1      | 1    | Image height in pixels. Can be any number between 0 and 255. Value 0 means height is 256 pixels. |\n * | 2      | 1    | Number of colors in the color palette. Should be 0 if the image does not use a color palette. |\n * | 3      | 1    | Reserved. Should be 0. |\n * | 4      | 2    | ICO format: Color planes. Should be 0 or 1. |\n * |        |      | CUR format: The horizontal coordinates of the hotspot in number of pixels from the left. |\n * | 6      | 2    | ICO format: Bits per pixel. |\n * |        |      | CUR format: The vertical coordinates of the hotspot in number of pixels from the top. |\n * | 8      | 4    | The size of the image's data in bytes |\n * | 12     | 4    | The offset of BMP or PNG data from the beginning of the ICO/CUR file |\n *\n */\nconst SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4; // 16\nfunction getSizeFromOffset(buffer, offset) {\n    const value = buffer.readUInt8(offset);\n    return value === 0 ? 256 : value;\n}\nfunction getImageSize(buffer, imageIndex) {\n    const offset = SIZE_HEADER + (imageIndex * SIZE_IMAGE_ENTRY);\n    return {\n        height: getSizeFromOffset(buffer, offset + 1),\n        width: getSizeFromOffset(buffer, offset)\n    };\n}\nexports.ICO = {\n    validate(buffer) {\n        if (buffer.readUInt16LE(0) !== 0) {\n            return false;\n        }\n        return buffer.readUInt16LE(2) === TYPE_ICON;\n    },\n    calculate(buffer) {\n        const nbImages = buffer.readUInt16LE(4);\n        const imageSize = getImageSize(buffer, 0);\n        if (nbImages === 1) {\n            return imageSize;\n        }\n        const imgs = [imageSize];\n        for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {\n            imgs.push(getImageSize(buffer, imageIndex));\n        }\n        const result = {\n            height: imageSize.height,\n            images: imgs,\n            width: imageSize.width\n        };\n        return result;\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DDS = void 0;\nexports.DDS = {\n    validate(buffer) {\n        return buffer.readUInt32LE(0) === 0x20534444;\n    },\n    calculate(buffer) {\n        return {\n            height: buffer.readUInt32LE(12),\n            width: buffer.readUInt32LE(16)\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GIF = void 0;\nconst gifRegexp = /^GIF8[79]a/;\nexports.GIF = {\n    validate(buffer) {\n        const signature = buffer.toString('ascii', 0, 6);\n        return (gifRegexp.test(signature));\n    },\n    calculate(buffer) {\n        return {\n            height: buffer.readUInt16LE(8),\n            width: buffer.readUInt16LE(6)\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ICNS = void 0;\n/**\n * ICNS Header\n *\n * | Offset | Size | Purpose                                                |\n * | 0\t    | 4    | Magic literal, must be \"icns\" (0x69, 0x63, 0x6e, 0x73) |\n * | 4      | 4    | Length of file, in bytes, msb first.                   |\n *\n */\nconst SIZE_HEADER = 4 + 4; // 8\nconst FILE_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose                                                          |\n * | 0\t    | 4    | Icon type, see OSType below.                                     |\n * | 4      | 4    | Length of data, in bytes (including type and length), msb first. |\n * | 8      | n    | Icon data                                                        |\n */\nconst ENTRY_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN\nconst ICON_TYPE_SIZE = {\n    ICON: 32,\n    'ICN#': 32,\n    // m => 16 x 16\n    'icm#': 16,\n    icm4: 16,\n    icm8: 16,\n    // s => 16 x 16\n    'ics#': 16,\n    ics4: 16,\n    ics8: 16,\n    is32: 16,\n    s8mk: 16,\n    icp4: 16,\n    // l => 32 x 32\n    icl4: 32,\n    icl8: 32,\n    il32: 32,\n    l8mk: 32,\n    icp5: 32,\n    ic11: 32,\n    // h => 48 x 48\n    ich4: 48,\n    ich8: 48,\n    ih32: 48,\n    h8mk: 48,\n    // . => 64 x 64\n    icp6: 64,\n    ic12: 32,\n    // t => 128 x 128\n    it32: 128,\n    t8mk: 128,\n    ic07: 128,\n    // . => 256 x 256\n    ic08: 256,\n    ic13: 256,\n    // . => 512 x 512\n    ic09: 512,\n    ic14: 512,\n    // . => 1024 x 1024\n    ic10: 1024,\n};\nfunction readImageHeader(buffer, imageOffset) {\n    const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;\n    return [\n        buffer.toString('ascii', imageOffset, imageLengthOffset),\n        buffer.readUInt32BE(imageLengthOffset)\n    ];\n}\nfunction getImageSize(type) {\n    const size = ICON_TYPE_SIZE[type];\n    return { width: size, height: size, type };\n}\nexports.ICNS = {\n    validate(buffer) {\n        return ('icns' === buffer.toString('ascii', 0, 4));\n    },\n    calculate(buffer) {\n        const bufferLength = buffer.length;\n        const fileLength = buffer.readUInt32BE(FILE_LENGTH_OFFSET);\n        let imageOffset = SIZE_HEADER;\n        let imageHeader = readImageHeader(buffer, imageOffset);\n        let imageSize = getImageSize(imageHeader[0]);\n        imageOffset += imageHeader[1];\n        if (imageOffset === fileLength) {\n            return imageSize;\n        }\n        const result = {\n            height: imageSize.height,\n            images: [imageSize],\n            width: imageSize.width\n        };\n        while (imageOffset < fileLength && imageOffset < bufferLength) {\n            imageHeader = readImageHeader(buffer, imageOffset);\n            imageSize = getImageSize(imageHeader[0]);\n            imageOffset += imageHeader[1];\n            result.images.push(imageSize);\n        }\n        return result;\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.J2C = void 0;\nexports.J2C = {\n    validate(buffer) {\n        // TODO: this doesn't seem right. SIZ marker doesn't have to be right after the SOC\n        return buffer.toString('hex', 0, 4) === 'ff4fff51';\n    },\n    calculate(buffer) {\n        return {\n            height: buffer.readUInt32BE(12),\n            width: buffer.readUInt32BE(8),\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JP2 = void 0;\nconst BoxTypes = {\n    ftyp: '66747970',\n    ihdr: '69686472',\n    jp2h: '6a703268',\n    jp__: '6a502020',\n    rreq: '72726571',\n    xml_: '786d6c20'\n};\nconst calculateRREQLength = (box) => {\n    const unit = box.readUInt8(0);\n    let offset = 1 + (2 * unit);\n    const numStdFlags = box.readUInt16BE(offset);\n    const flagsLength = numStdFlags * (2 + unit);\n    offset = offset + 2 + flagsLength;\n    const numVendorFeatures = box.readUInt16BE(offset);\n    const featuresLength = numVendorFeatures * (16 + unit);\n    return offset + 2 + featuresLength;\n};\nconst parseIHDR = (box) => {\n    return {\n        height: box.readUInt32BE(4),\n        width: box.readUInt32BE(8),\n    };\n};\nexports.JP2 = {\n    validate(buffer) {\n        const signature = buffer.toString('hex', 4, 8);\n        const signatureLength = buffer.readUInt32BE(0);\n        if (signature !== BoxTypes.jp__ || signatureLength < 1) {\n            return false;\n        }\n        const ftypeBoxStart = signatureLength + 4;\n        const ftypBoxLength = buffer.readUInt32BE(signatureLength);\n        const ftypBox = buffer.slice(ftypeBoxStart, ftypeBoxStart + ftypBoxLength);\n        return ftypBox.toString('hex', 0, 4) === BoxTypes.ftyp;\n    },\n    calculate(buffer) {\n        const signatureLength = buffer.readUInt32BE(0);\n        const ftypBoxLength = buffer.readUInt16BE(signatureLength + 2);\n        let offset = signatureLength + 4 + ftypBoxLength;\n        const nextBoxType = buffer.toString('hex', offset, offset + 4);\n        switch (nextBoxType) {\n            case BoxTypes.rreq:\n                // WHAT ARE THESE 4 BYTES?????\n                // eslint-disable-next-line no-case-declarations\n                const MAGIC = 4;\n                offset = offset + 4 + MAGIC + calculateRREQLength(buffer.slice(offset + 4));\n                return parseIHDR(buffer.slice(offset + 8, offset + 24));\n            case BoxTypes.jp2h:\n                return parseIHDR(buffer.slice(offset + 8, offset + 24));\n            default:\n                throw new TypeError('Unsupported header found: ' + buffer.toString('ascii', offset, offset + 4));\n        }\n    }\n};\n","\n// NOTE: we only support baseline and progressive JPGs here\n// due to the structure of the loader class, we only get a buffer\n// with a maximum size of 4096 bytes. so if the SOF marker is outside\n// if this range we can't detect the file size correctly.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JPG = void 0;\nconst readUInt_1 = require(\"../readUInt\");\nconst EXIF_MARKER = '45786966';\nconst APP1_DATA_SIZE_BYTES = 2;\nconst EXIF_HEADER_BYTES = 6;\nconst TIFF_BYTE_ALIGN_BYTES = 2;\nconst BIG_ENDIAN_BYTE_ALIGN = '4d4d';\nconst LITTLE_ENDIAN_BYTE_ALIGN = '4949';\n// Each entry is exactly 12 bytes\nconst IDF_ENTRY_BYTES = 12;\nconst NUM_DIRECTORY_ENTRIES_BYTES = 2;\nfunction isEXIF(buffer) {\n    return (buffer.toString('hex', 2, 6) === EXIF_MARKER);\n}\nfunction extractSize(buffer, index) {\n    return {\n        height: buffer.readUInt16BE(index),\n        width: buffer.readUInt16BE(index + 2)\n    };\n}\nfunction extractOrientation(exifBlock, isBigEndian) {\n    // TODO: assert that this contains 0x002A\n    // let STATIC_MOTOROLA_TIFF_HEADER_BYTES = 2\n    // let TIFF_IMAGE_FILE_DIRECTORY_BYTES = 4\n    // TODO: derive from TIFF_IMAGE_FILE_DIRECTORY_BYTES\n    const idfOffset = 8;\n    // IDF osset works from right after the header bytes\n    // (so the offset includes the tiff byte align)\n    const offset = EXIF_HEADER_BYTES + idfOffset;\n    const idfDirectoryEntries = (0, readUInt_1.readUInt)(exifBlock, 16, offset, isBigEndian);\n    for (let directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {\n        const start = offset + NUM_DIRECTORY_ENTRIES_BYTES + (directoryEntryNumber * IDF_ENTRY_BYTES);\n        const end = start + IDF_ENTRY_BYTES;\n        // Skip on corrupt EXIF blocks\n        if (start > exifBlock.length) {\n            return;\n        }\n        const block = exifBlock.slice(start, end);\n        const tagNumber = (0, readUInt_1.readUInt)(block, 16, 0, isBigEndian);\n        // 0x0112 (decimal: 274) is the `orientation` tag ID\n        if (tagNumber === 274) {\n            const dataFormat = (0, readUInt_1.readUInt)(block, 16, 2, isBigEndian);\n            if (dataFormat !== 3) {\n                return;\n            }\n            // unsinged int has 2 bytes per component\n            // if there would more than 4 bytes in total it's a pointer\n            const numberOfComponents = (0, readUInt_1.readUInt)(block, 32, 4, isBigEndian);\n            if (numberOfComponents !== 1) {\n                return;\n            }\n            return (0, readUInt_1.readUInt)(block, 16, 8, isBigEndian);\n        }\n    }\n}\nfunction validateExifBlock(buffer, index) {\n    // Skip APP1 Data Size\n    const exifBlock = buffer.slice(APP1_DATA_SIZE_BYTES, index);\n    // Consider byte alignment\n    const byteAlign = exifBlock.toString('hex', EXIF_HEADER_BYTES, EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES);\n    // Ignore Empty EXIF. Validate byte alignment\n    const isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;\n    const isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;\n    if (isBigEndian || isLittleEndian) {\n        return extractOrientation(exifBlock, isBigEndian);\n    }\n}\nfunction validateBuffer(buffer, index) {\n    // index should be within buffer limits\n    if (index > buffer.length) {\n        throw new TypeError('Corrupt JPG, exceeded buffer limits');\n    }\n    // Every JPEG block must begin with a 0xFF\n    if (buffer[index] !== 0xFF) {\n        throw new TypeError('Invalid JPG, marker table corrupted');\n    }\n}\nexports.JPG = {\n    validate(buffer) {\n        const SOIMarker = buffer.toString('hex', 0, 2);\n        return ('ffd8' === SOIMarker);\n    },\n    calculate(buffer) {\n        // Skip 4 chars, they are for signature\n        buffer = buffer.slice(4);\n        let orientation;\n        let next;\n        while (buffer.length) {\n            // read length of the next block\n            const i = buffer.readUInt16BE(0);\n            if (isEXIF(buffer)) {\n                orientation = validateExifBlock(buffer, i);\n            }\n            // ensure correct format\n            validateBuffer(buffer, i);\n            // 0xFFC0 is baseline standard(SOF)\n            // 0xFFC1 is baseline optimized(SOF)\n            // 0xFFC2 is progressive(SOF2)\n            next = buffer[i + 1];\n            if (next === 0xC0 || next === 0xC1 || next === 0xC2) {\n                const size = extractSize(buffer, i + 5);\n                // TODO: is orientation=0 a valid answer here?\n                if (!orientation) {\n                    return size;\n                }\n                return {\n                    height: size.height,\n                    orientation,\n                    width: size.width\n                };\n            }\n            // move to the next block\n            buffer = buffer.slice(i + 2);\n        }\n        throw new TypeError('Invalid JPG, no size found');\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readUInt = void 0;\n// Abstract reading multi-byte unsigned integers\nfunction readUInt(buffer, bits, offset, isBigEndian) {\n    offset = offset || 0;\n    const endian = isBigEndian ? 'BE' : 'LE';\n    const methodName = ('readUInt' + bits + endian);\n    return buffer[methodName].call(buffer, offset);\n}\nexports.readUInt = readUInt;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KTX = void 0;\nconst SIGNATURE = 'KTX 11';\nexports.KTX = {\n    validate(buffer) {\n        return SIGNATURE === buffer.toString('ascii', 1, 7);\n    },\n    calculate(buffer) {\n        return {\n            height: buffer.readUInt32LE(40),\n            width: buffer.readUInt32LE(36),\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PNG = void 0;\nconst pngSignature = 'PNG\\r\\n\\x1a\\n';\nconst pngImageHeaderChunkName = 'IHDR';\n// Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\nconst pngFriedChunkName = 'CgBI';\nexports.PNG = {\n    validate(buffer) {\n        if (pngSignature === buffer.toString('ascii', 1, 8)) {\n            let chunkName = buffer.toString('ascii', 12, 16);\n            if (chunkName === pngFriedChunkName) {\n                chunkName = buffer.toString('ascii', 28, 32);\n            }\n            if (chunkName !== pngImageHeaderChunkName) {\n                throw new TypeError('Invalid PNG');\n            }\n            return true;\n        }\n        return false;\n    },\n    calculate(buffer) {\n        if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {\n            return {\n                height: buffer.readUInt32BE(36),\n                width: buffer.readUInt32BE(32)\n            };\n        }\n        return {\n            height: buffer.readUInt32BE(20),\n            width: buffer.readUInt32BE(16)\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PNM = void 0;\nconst PNMTypes = {\n    P1: 'pbm/ascii',\n    P2: 'pgm/ascii',\n    P3: 'ppm/ascii',\n    P4: 'pbm',\n    P5: 'pgm',\n    P6: 'ppm',\n    P7: 'pam',\n    PF: 'pfm'\n};\nconst Signatures = Object.keys(PNMTypes);\nconst handlers = {\n    default: (lines) => {\n        let dimensions = [];\n        while (lines.length > 0) {\n            const line = lines.shift();\n            if (line[0] === '#') {\n                continue;\n            }\n            dimensions = line.split(' ');\n            break;\n        }\n        if (dimensions.length === 2) {\n            return {\n                height: parseInt(dimensions[1], 10),\n                width: parseInt(dimensions[0], 10),\n            };\n        }\n        else {\n            throw new TypeError('Invalid PNM');\n        }\n    },\n    pam: (lines) => {\n        const size = {};\n        while (lines.length > 0) {\n            const line = lines.shift();\n            if (line.length > 16 || line.charCodeAt(0) > 128) {\n                continue;\n            }\n            const [key, value] = line.split(' ');\n            if (key && value) {\n                size[key.toLowerCase()] = parseInt(value, 10);\n            }\n            if (size.height && size.width) {\n                break;\n            }\n        }\n        if (size.height && size.width) {\n            return {\n                height: size.height,\n                width: size.width\n            };\n        }\n        else {\n            throw new TypeError('Invalid PAM');\n        }\n    }\n};\nexports.PNM = {\n    validate(buffer) {\n        const signature = buffer.toString('ascii', 0, 2);\n        return Signatures.includes(signature);\n    },\n    calculate(buffer) {\n        const signature = buffer.toString('ascii', 0, 2);\n        const type = PNMTypes[signature];\n        // TODO: this probably generates garbage. move to a stream based parser\n        const lines = buffer.toString('ascii', 3).split(/[\\r\\n]+/);\n        const handler = handlers[type] || handlers.default;\n        return handler(lines);\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PSD = void 0;\nexports.PSD = {\n    validate(buffer) {\n        return ('8BPS' === buffer.toString('ascii', 0, 4));\n    },\n    calculate(buffer) {\n        return {\n            height: buffer.readUInt32BE(14),\n            width: buffer.readUInt32BE(18)\n        };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SVG = void 0;\nconst svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nconst extractorRegExps = {\n    height: /\\sheight=(['\"])([^%]+?)\\1/,\n    root: svgReg,\n    viewbox: /\\sviewBox=(['\"])(.+?)\\1/i,\n    width: /\\swidth=(['\"])([^%]+?)\\1/,\n};\nconst INCH_CM = 2.54;\nconst units = {\n    in: 96,\n    cm: 96 / INCH_CM,\n    em: 16,\n    ex: 8,\n    m: 96 / INCH_CM * 100,\n    mm: 96 / INCH_CM / 10,\n    pc: 96 / 72 / 12,\n    pt: 96 / 72,\n    px: 1\n};\nconst unitsReg = new RegExp(`^([0-9.]+(?:e\\\\d+)?)(${Object.keys(units).join('|')})?$`);\nfunction parseLength(len) {\n    const m = unitsReg.exec(len);\n    if (!m) {\n        return undefined;\n    }\n    return Math.round(Number(m[1]) * (units[m[2]] || 1));\n}\nfunction parseViewbox(viewbox) {\n    const bounds = viewbox.split(' ');\n    return {\n        height: parseLength(bounds[3]),\n        width: parseLength(bounds[2])\n    };\n}\nfunction parseAttributes(root) {\n    const width = root.match(extractorRegExps.width);\n    const height = root.match(extractorRegExps.height);\n    const viewbox = root.match(extractorRegExps.viewbox);\n    return {\n        height: height && parseLength(height[2]),\n        viewbox: viewbox && parseViewbox(viewbox[2]),\n        width: width && parseLength(width[2]),\n    };\n}\nfunction calculateByDimensions(attrs) {\n    return {\n        height: attrs.height,\n        width: attrs.width,\n    };\n}\nfunction calculateByViewbox(attrs, viewbox) {\n    const ratio = viewbox.width / viewbox.height;\n    if (attrs.width) {\n        return {\n            height: Math.floor(attrs.width / ratio),\n            width: attrs.width,\n        };\n    }\n    if (attrs.height) {\n        return {\n            height: attrs.height,\n            width: Math.floor(attrs.height * ratio),\n        };\n    }\n    return {\n        height: viewbox.height,\n        width: viewbox.width,\n    };\n}\nexports.SVG = {\n    validate(buffer) {\n        const str = String(buffer);\n        return svgReg.test(str);\n    },\n    calculate(buffer) {\n        const root = buffer.toString('utf8').match(extractorRegExps.root);\n        if (root) {\n            const attrs = parseAttributes(root[0]);\n            if (attrs.width && attrs.height) {\n                return calculateByDimensions(attrs);\n            }\n            if (attrs.viewbox) {\n                return calculateByViewbox(attrs, attrs.viewbox);\n            }\n        }\n        throw new TypeError('Invalid SVG');\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TIFF = void 0;\n// based on http://www.compix.com/fileformattif.htm\n// TO-DO: support big-endian as well\nconst fs = require(\"fs\");\nconst readUInt_1 = require(\"../readUInt\");\n// Read IFD (image-file-directory) into a buffer\nfunction readIFD(buffer, filepath, isBigEndian) {\n    const ifdOffset = (0, readUInt_1.readUInt)(buffer, 32, 4, isBigEndian);\n    // read only till the end of the file\n    let bufferSize = 1024;\n    const fileSize = fs.statSync(filepath).size;\n    if (ifdOffset + bufferSize > fileSize) {\n        bufferSize = fileSize - ifdOffset - 10;\n    }\n    // populate the buffer\n    const endBuffer = Buffer.alloc(bufferSize);\n    const descriptor = fs.openSync(filepath, 'r');\n    fs.readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset);\n    fs.closeSync(descriptor);\n    return endBuffer.slice(2);\n}\n// TIFF values seem to be messed up on Big-Endian, this helps\nfunction readValue(buffer, isBigEndian) {\n    const low = (0, readUInt_1.readUInt)(buffer, 16, 8, isBigEndian);\n    const high = (0, readUInt_1.readUInt)(buffer, 16, 10, isBigEndian);\n    return (high << 16) + low;\n}\n// move to the next tag\nfunction nextTag(buffer) {\n    if (buffer.length > 24) {\n        return buffer.slice(12);\n    }\n}\n// Extract IFD tags from TIFF metadata\nfunction extractTags(buffer, isBigEndian) {\n    const tags = {};\n    let temp = buffer;\n    while (temp && temp.length) {\n        const code = (0, readUInt_1.readUInt)(temp, 16, 0, isBigEndian);\n        const type = (0, readUInt_1.readUInt)(temp, 16, 2, isBigEndian);\n        const length = (0, readUInt_1.readUInt)(temp, 32, 4, isBigEndian);\n        // 0 means end of IFD\n        if (code === 0) {\n            break;\n        }\n        else {\n            // 256 is width, 257 is height\n            // if (code === 256 || code === 257) {\n            if (length === 1 && (type === 3 || type === 4)) {\n                tags[code] = readValue(temp, isBigEndian);\n            }\n            // move to the next tag\n            temp = nextTag(temp);\n        }\n    }\n    return tags;\n}\n// Test if the TIFF is Big Endian or Little Endian\nfunction determineEndianness(buffer) {\n    const signature = buffer.toString('ascii', 0, 2);\n    if ('II' === signature) {\n        return 'LE';\n    }\n    else if ('MM' === signature) {\n        return 'BE';\n    }\n}\nconst signatures = [\n    // '492049', // currently not supported\n    '49492a00',\n    '4d4d002a', // Big Endian\n    // '4d4d002a', // BigTIFF > 4GB. currently not supported\n];\nexports.TIFF = {\n    validate(buffer) {\n        return signatures.includes(buffer.toString('hex', 0, 4));\n    },\n    calculate(buffer, filepath) {\n        if (!filepath) {\n            throw new TypeError('Tiff doesn\\'t support buffer');\n        }\n        // Determine BE/LE\n        const isBigEndian = determineEndianness(buffer) === 'BE';\n        // read the IFD\n        const ifdBuffer = readIFD(buffer, filepath, isBigEndian);\n        // extract the tags from the IFD\n        const tags = extractTags(ifdBuffer, isBigEndian);\n        const width = tags[256];\n        const height = tags[257];\n        if (!width || !height) {\n            throw new TypeError('Invalid Tiff. Missing tags');\n        }\n        return { height, width };\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WEBP = void 0;\nfunction calculateExtended(buffer) {\n    return {\n        height: 1 + buffer.readUIntLE(7, 3),\n        width: 1 + buffer.readUIntLE(4, 3)\n    };\n}\nfunction calculateLossless(buffer) {\n    return {\n        height: 1 + (((buffer[4] & 0xF) << 10) | (buffer[3] << 2) | ((buffer[2] & 0xC0) >> 6)),\n        width: 1 + (((buffer[2] & 0x3F) << 8) | buffer[1])\n    };\n}\nfunction calculateLossy(buffer) {\n    // `& 0x3fff` returns the last 14 bits\n    // TO-DO: include webp scaling in the calculations\n    return {\n        height: buffer.readInt16LE(8) & 0x3fff,\n        width: buffer.readInt16LE(6) & 0x3fff\n    };\n}\nexports.WEBP = {\n    validate(buffer) {\n        const riffHeader = 'RIFF' === buffer.toString('ascii', 0, 4);\n        const webpHeader = 'WEBP' === buffer.toString('ascii', 8, 12);\n        const vp8Header = 'VP8' === buffer.toString('ascii', 12, 15);\n        return (riffHeader && webpHeader && vp8Header);\n    },\n    calculate(buffer) {\n        const chunkHeader = buffer.toString('ascii', 12, 16);\n        buffer = buffer.slice(20, 30);\n        // Extended webp stream signature\n        if (chunkHeader === 'VP8X') {\n            const extendedHeader = buffer[0];\n            const validStart = (extendedHeader & 0xc0) === 0;\n            const validEnd = (extendedHeader & 0x01) === 0;\n            if (validStart && validEnd) {\n                return calculateExtended(buffer);\n            }\n            else {\n                // TODO: breaking change\n                throw new TypeError('Invalid WebP');\n            }\n        }\n        // Lossless webp stream signature\n        if (chunkHeader === 'VP8 ' && buffer[0] !== 0x2f) {\n            return calculateLossy(buffer);\n        }\n        // Lossy webp stream signature\n        const signature = buffer.toString('hex', 3, 6);\n        if (chunkHeader === 'VP8L' && signature !== '9d012a') {\n            return calculateLossless(buffer);\n        }\n        throw new TypeError('Invalid WebP');\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detector = void 0;\nconst types_1 = require(\"./types\");\nconst keys = Object.keys(types_1.typeHandlers);\n// This map helps avoid validating for every single image type\nconst firstBytes = {\n    0x38: 'psd',\n    0x42: 'bmp',\n    0x44: 'dds',\n    0x47: 'gif',\n    0x49: 'tiff',\n    0x4d: 'tiff',\n    0x52: 'webp',\n    0x69: 'icns',\n    0x89: 'png',\n    0xff: 'jpg'\n};\nfunction detector(buffer) {\n    const byte = buffer[0];\n    if (byte in firstBytes) {\n        const type = firstBytes[byte];\n        if (type && types_1.typeHandlers[type].validate(buffer)) {\n            return type;\n        }\n    }\n    const finder = (key) => types_1.typeHandlers[key].validate(buffer);\n    return keys.find(finder);\n}\nexports.detector = detector;\n"]}