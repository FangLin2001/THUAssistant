{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var tough = require('tough-cookie-no-native');\nvar denodeify = require('es6-denodeify')(Promise);\n\nclass IsomorphicFetch {\n\tconstructor(fetch = window.fetch, jar = new tough.CookieJar()) {\n\t\tthis.fetch = fetch;\n\t\tthis.jar = jar;\n\n\t\tthis.getCookieString = denodeify(jar.getCookieString.bind(jar));\n\t\tthis.setCookie = denodeify(jar.setCookie.bind(jar));\n\n\t\treturn this.makeRequest.bind(this);\n\t}\n\tmakeRequest(url, options = {}) {\n\t\toptions.credentials = 'include'; // Include cookies (only) in the browser\n\t\toptions.redirect = 'manual'; // Intercept redirects (only) in node\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.getCookieString(url)\n\t\t\t.then(cookie => {\n\t\t\t\tif (!options.headers) {\n\t\t\t\t\toptions.headers = {};\n\t\t\t\t}\n\n\t\t\t\tif (typeof window === 'undefined') { // Don't include cookie header if browser / react native environment\n\t\t\t\t\toptions.headers.Cookie = cookie;\n\t\t\t\t}\n\n\t\t\t\toptions.headers = this.normalizeHeaders(options.headers);\n\t\t\t\treturn this.fetch(url, options);\n\t\t\t})\n\t\t\t.then(response => {\n\t\t\t\tvar cookies = [(response.headers.get('Set-Cookie') || '')].filter(Boolean);\n\t\t\t\tif (!cookies.length) {\n\t\t\t\t\treturn [response];\n\t\t\t\t}\n\t\t\t\tvar saveAllCookies = cookies.map(cookie => this.setCookie(cookie, url));\n\t\t\t\treturn Promise.all([\n\t\t\t\t\tresponse,\n\t\t\t\t\tPromise.all(saveAllCookies)\n\t\t\t\t]);\n\t\t\t})\n\t\t\t.then(afterSaved => {\n\t\t\t\tvar [response] = afterSaved;\n\t\t\t\tvar redirect = response.headers.get('Location');\n\t\t\t\tvar optionsToCarry = this.getOptionsToCarry(options);\n\t\t\t\tif (redirect) {\n\t\t\t\t\treturn this.makeRequest(redirect, optionsToCarry);\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.then(resolve)\n\t\t\t.catch(reject);\n\t\t});\n\t}\n\tnormalizeHeaders(headers) {\n\t\tvar keys = Object.keys(headers);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tlet key = keys[i];\n\t\t\tlet lowercasedKey = key.toLowerCase();\n\t\t\tif (!headers[lowercasedKey]) {\n\t\t\t\theaders[lowercasedKey] = headers[key];\n\t\t\t\tdelete headers[key];\n\t\t\t}\n\t\t}\n\t\treturn headers;\n\t}\n\tgetOptionsToCarry(options) {\n\t\tvar headers = {};\n\t\tif (options.headers['user-agent']) {\n\t\t\theaders['user-agent'] = options.headers['user-agent'];\n\t\t}\n\t\treturn {\n\t\t\theaders\n\t\t};\n\t}\n}\n\nmodule.exports = IsomorphicFetch;\n"]}